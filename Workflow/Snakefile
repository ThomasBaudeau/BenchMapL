configfile: '../config/config.yaml'

TOOLS= [a for a in config['param']]



def getparam(wildcards):
    print(wildcards.param.replace("#",' '))
    return wildcards.param.replace("#",' ')

rule all_default:
    input:
        expand( "stat_tools/{tool}_default_{param}.stat.txt",zip,tool=TOOLS,param=[config['param'][tool]['command'][0] for tool in TOOLS ])

rule final:
    input :
        "plots/test1.png",
        "plots/test2.png"

rule plot_test:
    input:
       expand("mapped_reads/{tool}_default_{param}.bam",zip,tool=TOOLS,param=[config['param'][tool]['command'][0] for tool in TOOLS ])
    output:
        "plots/test1.png",
        "plots/test2.png"
    conda:
        "env/plotscript.yaml"
    script:
        'scripts/test2.py'
        
rule sam_stat:
    input:
        "mapped_reads/{tool}_{name}_{param}.bam"
    output:
        "stat_tools/{tool}_{name}_{param}.stat.txt"
    shell:
       "/home/bonsai/bin/SamTool/samtools/samtools stats {input} > {output}"

rule sam_bam:
    input:
        "mapped_reads/{tool}_{name}_{param}.sam"
    output:
        "mapped_reads/{tool}_{name}_{param}.bam"
    shell:
       "/home/bonsai/bin/SamTool/samtools/samtools sort {input} > {output}"

rule all_minimap2:
    input:
        expand("mapped_reads/minimap2_{name}_{param}.sam",zip,param=config['param']['minimap2']['command'],name=config['param']['minimap2']['name'])

rule minimap2:
    input:
        ref=config["ref"],
        reads= config["dataset"]
    output:
        "mapped_reads/minimap2_{name}_{param}.sam"
    params:
        getparam
    shell:
        "~/bin/minimap2-2.24/minimap2 {params} {input.ref} {input.reads} > {output}"

rule all_graphmap2:
    input:
        expand("mapped_reads/graphmap2_{name}_{param}.sam",zip,param=config['param']['graphmap2']['command'],name=config['param']['graphmap2']['name'])

rule graphmap2:
    input:
        ref=config["ref"],
        reads= config["dataset"]
    output:
        "mapped_reads/graphmap2_{name}_{param}.sam"
    params:
        getparam
    shell:
        "/home/bonsai/bin/graphmap2/graphmap2/bin/Linux-x64/graphmap2 {params} -r {input.ref} -d {input.reads} > {output}"


rule all_graphmap:
    input:
        expand("mapped_reads/graphmap_{name}_{param}.sam",zip,param=config['param']['graphmap']['command'],name=config['param']['graphmap']['name'])

rule graphmap:
    input:
        ref=config["ref"],
        reads= config["dataset"]
    output:
        "mapped_reads/graphmap_{name}_{param}.sam"
    params:
        getparam
    shell:
        "~/bin/graphmap/graphmap/bin/Linux-x64/graphmap {params} -r {input.ref} -d {input.reads} > {output}"


rule all_mm2f:
    input:
        expand("mapped_reads/mm2f_{name}_{param}.sam",zip,param=config['param']['mm2f']['command'],name=config['param']['mm2f']['name'])

rule mm2f:
    input:
        ref=config["ref"],
        reads= config["dataset"]
    output:
        "mapped_reads/mm2f_{name}_{param}.sam"
    params:
        getparam
    shell:
        "~/bin/mm2-fast/mm2-fast/minimap2 {params} {input.ref} {input.reads} > {output}"

rule all_blasr:
    input:
        expand("mapped_reads/blasr_{name}_{param}.sam",zip,param=config['param']['blasr']['command'],name=config['param']['blasr']['name'])


rule blasr:
    input:
        ref=config["ref"],
        reads= config["dataset"]
    output:
        "mapped_reads/blasr_{name}_{param}.sam"
    conda:
        "pyt36"
    params:
        getparam
    shell:
        "blasr {input.reads} {input.ref} {params} --out {output}> {output}"

rule all_winnowmap:
    input:
        expand("mapped_reads/winnowmap_{name}_{param}.sam",zip,param=config['param']['winnowmap']['command'],name=config['param']['winnowmap']['name'])


rule winnowmap:
    input:
        ref=config["ref"],
        reads= config["dataset"],
        meril=directory('temps')
    output:
        "mapped_reads/winnowmap_{name}_{param}.sam"
    conda:
        "pyt36"
    params:
        getparam
    shell:
        " ~/bin/winomap/Winnowmap/bin/winnowmap -W {input.meril} {params} {input.ref} {input.reads} > {output}"

rule pre_winnowmap_1:
    input:
        config["ref"]
    output:
        temp(directory('temps'))
        
    shell:
       " ~/bin/winomap/Winnowmap/bin/meryl count k=15 output {output} {input}"

rule pre_winnowmap_2:
    input:
        'temps'
    output:
        temp('mapped_reads/repetitive_k15_meril.txt')
    shell:
       " ~/bin/winomap/Winnowmap/bin/meryl print greater-than distinct=0.9998 merylDB> {output}"

rule all_magicblast:
    input:
        expand("mapped_reads/magicblast_{name}_{param}.sam",zip,param=config['param']['magicblast']['command'],name=config['param']['magicblast']['name'])


rule magicblast:
    input:
        ref=config["ref"],
        reads= config["dataset"]
    output:
        "mapped_reads/magicblast_{name}_{param}.sam"
    conda:
        "env/magicblast.yaml"
    params:
        getparam
    shell:
        "makeblastdb -in {input.ref} -out tempdb/aname -parse_seqids -dbtype nucl; magicblast -query {params} {input.reads} -db tempdb/aname -out {output};rm tempdb -r"

rule all_lra:
    input:
        expand("mapped_reads/magicblast_{name}_{param}.sam",zip,param=config['param']['lra']['command'],name=config['param']['lra']['name'])

rule lra:
    input:
        ref=config["ref"],
        reads= config["dataset"]
    output:
        "mapped_reads/lra_{name}_{param}.sam"
    conda:
        "env/lra.yaml"
    params:
        getparam
    shell:
        "lra index -ONT -W 8 -F 400 {input.ref};lra align -ONT {input.ref} {input.reads} {params} -p s > {output};rm {input.ref}.gli;rm {input.ref}.mmi"

"""
rule all_mashmap:
    input:
        expand("mapped_reads/mashmap_{name}_{param}.sam",zip,param=config['param']['mashmap']['command'],name=config['param']['mashmap']['name'])

rule mashmap:
    input:
        ref=config["ref"],
        reads= config["dataset"],
    output:
        "mapped_reads/mashmap_{name}_{param}.sam"
    conda:
        "pyt36"
    params:
        getparam
    shell:
        " ~/bin/mashmap/MashMap/mashmap -r {params} {input.ref} -q {input.reads} -o {output}"

rule all_stampy:
    input:
        expand("mapped_reads/stampy_{name}_{param}.sam",zip,param=config['param']['stampy']['command'],name=config['param']['stampy']['name'])


rule stampy_gen:
    input:
        ref=config["ref"],
        reads= config["dataset"]
    output:
        'mapped_reads/stampy_{name}_{param}.sam'
    params:
        getparam
    shell:
        'python2 /home/bonsai/bin/stampy-1.0.32/stampy.py -G temp {input.ref} ;python2 /home/bonsai/bin/stampy-1.0.32/stampy.py -g temp -H temp;python2 /home/bonsai/bin/stampy-1.0.32/stampy.py -g temp -h temp -M {input.ref} > {output}'

"""
"""
rule all_minimap:
    input:
        expand("mapped_reads/minimap_{name}_{param}.sam",zip,param=config['param']['minimap']['command'],name=config['param']['minimap']['name'])

rule minimap:
    input:
        ref=config["ref"],
        reads= config["dataset"]
    output:
        "mapped_reads/minimap_{name}_{param}.sam"
    params:
        getparam
    shell:
        "~/bin/minimap-0.2/minimap {params} {input.ref} {input.reads} > {output}"
"""