

configfile: '../config/config.yaml'

TOOLS= [tool for tool in config['param']]
ret=[]
a= expand( "mapped_reads/{tool}_{species}_{length}_{param}.bam",zip,tool=TOOLS,allow_missing=True)
for elem in a:
    for specie in config['species']:
        for length in ['5000','350']:
            for aparam in config['param'][elem[13:elem.find('_',13)]]['command']:
                b=elem.replace('{species}',specie)
                b=b.replace('{length}',str(length))
                b=b.replace('{param}',aparam)
                ret.append(b)
print(ret)
def all_sample_default(wildcards):
    ret=[]
    a= expand( "mapped_reads/{tool}_{species}_{length}_{param}.bam",zip,tool=TOOLS,param=[config['param'][tool]['command'][0] for tool in TOOLS ],allow_missing=True)
    for elem in a:
        for specie in config['species']:
            for length in config['length']:
                b=elem.replace('{species}',specie)
                b=b.replace('{length}',str(length))
                ret.append(b)
    return ret

def two_sample_all(wildcards):
    ret=[]
    a= expand( "mapped_reads/{tool}_{species}_{length}_{param}.bam",zip,tool=TOOLS,allow_missing=True)
    for elem in a:
        for specie in config['species']:
            for length in ['5000','350']:
                for aparam in config['param'][elem[13:elem.find('_',13)]]['command']:
                    b=elem.replace('{species}',specie)
                    b=b.replace('{length}',str(length))
                    b=b.replace('{param}',aparam)
                    ret.append(b)
    return ret

def all_sample_default(wildcards):
    ret=[]
    a= expand( "mapped_reads/{tool}_{species}_{length}_{param}.bam",zip,tool=TOOLS,param=[config['param'][tool]['command'][0] for tool in TOOLS ],allow_missing=True)
    for elem in a:
        for specie in config['species']:
            for length in config['length']:
                b=elem.replace('{species}',specie)
                b=b.replace('{length}',str(length))
                ret.append(b)
    return ret



def getparam(wildcards):
    return wildcards.param.replace("#",' ').replace('ยง','_')

rule final1:
    input :
       expand( "plots/{species}_{length}_rl{num}.png", species=config['species'],length=config['length'],num=['1','2'])

rule final2:
    input :
       expand( "plots/{tool}_{species}_{length}_bc{num}.png",tool=TOOLS, species=config['species'],length=['5000','350'],num=['1','2'])


rule plot_read_length:
    input:
       all_sample_default
    output:
        "plots/{species}_{length}_rl1.png",
        "plots/{species}_{length}_rl2.png"
    conda:
        "env/plotscript.yaml"
    script:
        'scripts/test2.py'

rule plot_best_command:
    input:
       two_sample_all
    output:
        "plots/{tool}_{species}_{length}_bc1.png",
        "plots/{tool}_{species}_{length}_bc2.png"
    conda:
        "env/plotscript.yaml"
    script:
        'scripts/test3.py'
        
rule sam_stat:
    input:
        "mapped_reads/{tool}_{species}_{length}_{param}.bam"
    output:
        "stat_tools/{tool}_{species}_{length}_{param}.stat.txt"
    shell:
       "/home/bonsai/bin/SamTool/samtools/samtools stats {input} > {output}"

rule sam_bam:
    input:
        "mapped_reads/{tool}_{species}_{length}_{param}.sam"
    output:
        "mapped_reads/{tool}_{species}_{length}_{param}.bam"
    shell:
       "/home/bonsai/bin/SamTool/samtools/samtools sort {input} > {output};rm {input}"

rule all_minimap2:
    input:
        expand("mapped_reads/minimap2_{species}_{length}_{param}.sam", species=config['species'],length=config['length'],param=config['param']['minimap2']['command'])

rule minimap2:
    input:
        ref='data/ref_{species}.fasta',
        reads= 'data/samples/{species}_{length}_reads.fasta'
    output:
        "mapped_reads/minimap2_{species}_{length}_{param}.sam"
    conda:
        "env/minimap2.yaml"
    params:
        getparam
    shell:
        "minimap2 -ax map-ont {params} {input.ref} {input.reads} > {output}"

rule all_graphmap2:
    input:
        expand("mapped_reads/graphmap2_{species}_{length}_{param}.sam",species=config['species'],length=config['length'],param=config['param']['graphmap2']['command'])

rule graphmap2:
    input:
        ref= 'data/ref_{species}.fasta',
        reads= 'data/samples/{species}_{length}_reads.fasta'
    output:
        "mapped_reads/graphmap2_{species}_{length}_{param}.sam"
    conda:
        "env/graphmap2.yaml"
    params:
        getparam
    shell:
        "graphmap2 align --auto-rebuild-index -r {input.ref} -d {input.reads} {params} > {output}"


rule all_graphmap:
    input:
        expand("mapped_reads/graphmap_{species}_{length}_{param}.sam",species=config['species'],length=config['length'],param=config['param']['graphmap']['command'])

rule graphmap:
    input:
        ref= 'data/ref_{species}.fasta',
        reads= 'data/samples/{species}_{length}_reads.fasta'
    output:
        "mapped_reads/graphmap_{species}_{length}_{param}.sam"
    conda:
        "env/graphmap.yaml"
    params:
        getparam
    shell:
        "graphmap align -x sensitive -r {input.ref} -d {input.reads} {params} > {output}"


rule all_mm2f:
    input:
        expand("mapped_reads/mm2f_{species}_{length}_{param}.sam",species=config['species'],length=config['length'],param=config['param']['mm2f']['command'])

rule mm2f:
    input:
        ref= 'data/ref_{species}.fasta',
        reads= 'data/samples/{species}_{length}_reads.fasta'
    output:
        "mapped_reads/mm2f_{species}_{length}_{param}.sam"
    params:
        getparam
    shell:
        "~/bin/mm2-fast/mm2-fast/minimap2 -ax map-ont {input.ref} {input.reads} > {output}"

rule all_blasr:
    input:
        expand("mapped_reads/blasr_{species}_{length}_{param}.sam",species=config['species'],length=config['length'],param=config['param']['blasr']['command'])


rule blasr:
    input:
        ref= 'data/ref_{species}.fasta',
        reads= 'data/samples/{species}_{length}_reads.fasta'
    output:
        "mapped_reads/blasr_{species}_{length}_{param}.sam"
    conda:
        "env/blasr.yaml"
    params:
        getparam
    shell:
        "blasr {input.reads} {input.ref} {params} --sam --out {output}> {output}"

rule all_winnowmap:
    input:
        expand("mapped_reads/winnowmap_{species}_{length}_{param}.sam",species=config['species'],length=config['length'],param=config['param']['winnowmap']['command'])


rule winnowmap:
    input:
        ref= 'data/ref_{species}.fasta',
        reads= 'data/samples/{species}_{length}_reads.fasta',
        meril='temps_{species}'
    output:
        "mapped_reads/winnowmap_{species}_{length}_{param}.sam"
    conda:
        "env/winnowmap.yaml"
    params:
        getparam
    shell:
        "winnowmap -W {input.meril} -ax map-ont {input.ref} {input.reads} > {output}"

rule pre_winnowmap_1:
    input:
        ref= 'data/ref_{species}.fasta',
    output:
        temp(directory('temps_{species}'))
    conda:
        "env/winnowmap.yaml"
    shell:
       "meryl count memory=16 threads=10 k=19 output {output} {input.ref}"

rule pre_winnowmap_2:
    input:
        'temps_{species}'
    output:
        temp('mapped_reads/repetitive_k15_meril.txt')
    conda:
        "env/winnowmap.yaml"
    shell:
       "meryl print greater-than distinct=0.9998 {input}> {output}"

rule all_magicblast:
    input:
        expand("mapped_reads/magicblast_{species}_{length}_{param}.sam",species=config['species'],length=config['length'],param=config['param']['magicblast']['command'])


rule magicblast:
    input:
        ref= 'data/ref_{species}.fasta',
        reads= 'data/samples/{species}_{length}_reads.fasta',
    output:
        "mapped_reads/magicblast_{species}_{length}_{param}.sam"
    conda:
        "env/magicblast.yaml"
    params:
        getparam
    shell:
        "makeblastdb -in {input.ref} -out blastdb/default -parse_seqids -dbtype nucl; magicblast -query {input.reads} -db blastdb/default {params} -out {output};"

rule all_lra:
    input:
        expand("mapped_reads/magicblast_{species}_{length}_{param}.sam",species=config['species'],length=config['length'],param=config['param']['lra']['command'])

rule lra:
    input:
        ref= 'data/ref_{species}.fasta',
        reads= 'data/samples/{species}_{length}_reads.fasta',
    output:
        "mapped_reads/lra_{species}_{length}_{param}.sam"
    conda:
        "env/lra.yaml"
    params:
        getparam
    shell:
        "lra index -ONT {params} {input.ref};lra align -ONT -t 16 -a {input.ref} {input.reads}  -p s > {output};rm {input.ref}.gli;rm {input.ref}.mmi"


# 
# ;rm data/*.fasta.gmidx
#;;rm tempdb -r

