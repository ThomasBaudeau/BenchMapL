import os
# config file name
configfile: '../config/config.yaml'
def autocoverage(wildcards):
    return int(((9000*int(config['number']))/(int(wildcards.length)/2)))


def variant(wildcards):
    species=config['species']
    var=['WT']
    for j in species:
        for i in range(config['variant']['number']):
            var.append('V'+str(i)+j)
    return var

VARIANT=variant(config)


ruleorder: add_human > convert_header 



TOOLS= [tool for tool in config['param']]
#Path

path_tool = "../../../"
path_maketool = os.path.join(path_tool,"PipTool")
path_os_minimap=os.path.join(path_maketool,"os-minimap2")
path_sync_minimap=os.path.join(path_maketool,"syncmer_mapping/syncmer_minimap")
path_blend=os.path.join(path_maketool,"blend/bin")
path_blast2sam=os.path.join(path_tool,"../bin/Blast2sam/jvarkit/dist/")
#Function



def two_sample_all(wildcards):
    ret=[]
    a= expand( "mapped_reads/{tool}_{species}_{length}_{error_rate}_{param}.bam",zip,tool=TOOLS,allow_missing=True)
    for elem in a:
        for specie in config['species']:
            for length in config['length']:
                for er in config['error_rate']:
                    for aparam in config['param'][elem[13:elem.find('_',13)]]['command']:
                        b=elem.replace('{species}',specie)
                        b=b.replace('{error_rate}',er)
                        b=b.replace('{length}',str(length))
                        b=b.replace('{param}',aparam)
                        ret.append(b)
    return ret




def all_sample_default(wildcards):
    ret=[]
    a= expand( "mapped_reads/{tool}_{species}_{length}_{error_rate}_{param}.bam",zip,tool=TOOLS,param=[config['param'][tool]['command'][0] for tool in TOOLS ],allow_missing=True)
    for elem in a:
        for specie in config['species']:
            for er in config['error_rate']:
                for length in config['length']:
                    b=elem.replace('{species}',specie)
                    b=b.replace('{error_rate}',er)
                    b=b.replace('{length}',str(length))
                    ret.append(b)
    return ret

def all_stat_default(wildcards):
    ret=[]
    a= expand( "stat_tools/{tool}_{species}_{length}_{error_rate}_{param}.stat.txt",zip,tool=TOOLS,param=[config['param'][tool]['command'][0] for tool in TOOLS ],allow_missing=True)
    for elem in a:
        for specie in config['species']:
            for er in config['error_rate']:
                for length in config['length']:
                    b=elem.replace('{species}',specie)
                    b=b.replace('{error_rate}',er)
                    b=b.replace('{length}',str(length))
                    ret.append(b)
    return ret

def all_sample_best(wildcards):
    ret=[]
    a= expand( "mapped_reads/{tool}_{species}_{length}_{error_rate}_{param}.bam",zip,tool=TOOLS,allow_missing=True)
    for elem in a:
        for specie in config['species']:
            for length in config['length']:
                for er in config['error_rate']:
                    for i in range(len(config['param'][elem[13:elem.find('_',13)]]['command'])):
                            if '*' in config['param'][elem[13:elem.find('_',13)]]['name'][i]:
                                b=elem.replace('{species}',specie)
                                b=b.replace('{error_rate}',er)
                                b=b.replace('{length}',str(length))
                                b=b.replace('{param}',config['param'][elem[13:elem.find('_',13)]]['command'][i])
                                ret.append(b)
    return ret


def all_reads(wildcards):
    ret=[]
    a= expand( "medaka/{tool}_{species}_{length}_{error_rate}_{param}.vcf",zip,tool=TOOLS,allow_missing=True)
    for elem in a:
        for specie in config['species']:
            for length in config['length']:
                for er in config['error_rate']:
                    for aparam in config['param'][elem[7:elem.find('_',7)]]['command']:
                        b=elem.replace('{species}',specie)
                        b=b.replace('{error_rate}',er)
                        b=b.replace('{length}',str(length))
                        b=b.replace('{param}',aparam)
                        ret.append(b)
    for specie in config['species']:
            for length in config['length']:
                for er in config['error_rate']:             
                    ret.append('medaka/perfect_{species}_{alength}_{error_rate}_perfect.vcf'.format(species=specie,alength=str(length),error_rate=er))
    return ret

def all_sample_best_medaka(wildcards):
    ret=[]
    a= expand( "medaka/{tool}_{species}_{length}_{error_rate}_{param}.vcf",zip,tool=TOOLS,allow_missing=True)
    for elem in a:
        for specie in config['species']:
            for length in config['length']:
                for er in config['error_rate']:
                    for i in range(len(config['param'][elem[7:elem.find('_',7)]]['command'])):
                            if '*' in config['param'][elem[7:elem.find('_',7)]]['name'][i]:
                                b=elem.replace('{species}',specie)
                                b=b.replace('{error_rate}',er)
                                b=b.replace('{length}',str(length))
                                b=b.replace('{param}',config['param'][elem[7:elem.find('_',7)]]['command'][i])
                                ret.append(b)
    for specie in config['species']:
                for length in config['length']:
                    for er in config['error_rate']:             
                        ret.append('medaka/perfect_{species}_{alength}_{error_rate}_perfect.vcf'.format(species=specie,alength=str(length),error_rate=er)) 
    return ret

def getparam(wildcards):
    return wildcards.param.replace("#",' ').replace('ยง','_')

rule run_var:
    input:
        expand( "plots/variant/{species}_{length}_{error_rate}_bc1.pdf", species=config['species'],length=config['length'],num=['1','2','3','4','5'],error_rate=config['error_rate'])
rule run_default:
    input :
       expand( "plots/default/{species}_{length}_{error_rate}_rl{num}.pdf", species=config['species'],length=config['length'],num=['1','2','3','4','5'],error_rate=config['error_rate'])

rule run_params:
    input :
       expand( "plots/params/{tool}/{tool}_{species}_{length}_{error_rate}_bc{num}.pdf",tool=TOOLS, species=config['species'],length=['5000','350'],num=['1','2','3'],error_rate=config['error_rate'])

rule call_variants:
    input:
        all_sample_best_medaka

rule run_best:
    input :
       expand( "plots/best/{species}_{length}_{error_rate}_rl{num}.pdf", species=config['species'],length=config['length'],num=['1','2','3','4','5'],error_rate=config['error_rate'])

rule final_stat:
    input :
        all_stat_default

rule plot_best_command:
    input:
       all_sample_best
    output:
        "plots/best/{species}_{length}_{error_rate}_rl1.pdf",
        "plots/best/{species}_{length}_{error_rate}_rl2.pdf",
        "plots/best/{species}_{length}_{error_rate}_rl3.pdf",
        "plots/best/{species}_{length}_{error_rate}_rl4.pdf",
        "plots/best/{species}_{length}_{error_rate}_rl5.pdf"
    conda:
        "env/plotscript.yaml"
    script:
        'scripts/plot_default.py'


rule all_stats_csv:
    input:
        all_reads
    output:
        'results.csv'
    conda:
       "env/plotscript.yaml"
    script:
       'scripts/all_stats.py'

rule all:
    input:
        'results.csv'
        
rule medaka_concensus:
    input:
        model='data/model/r103_min_high_g360_model.hdf5',
        ref='data/ref_{species}.fasta',
        read="mapped_reads/{tool}_{species}_{length}_{error_rate}_{param}.bam"
    output:
        'medaka/{tool}_{species}_{length}_{error_rate}_{param}_concensus.fasta'
    conda:
        'env/medaka.yaml'
    shell:
        "medaka consensus {input.read} {output} --model {input.model} --batch_size 100 --threads 1"

rule perfect_samtobam:
    input:
        ref='data/ref_{species}.fasta',
        psam="data/perfect/{species}_{length}_{error_rate}_perfect.sam"
    output:
        pbam="mapped_reads/perfect_{species}_{length}_{error_rate}_perfect.bam"
    conda:
        "env/samtool.yaml"
    shell:
        """samtools faidx {input.ref};
        samtools view -bt {input.ref}.fai {input.psam}>mapped_reads/y.bam;
        samtools sort -n mapped_reads/y.bam -o mapped_reads/yt.bam;
        samtools fixmate mapped_reads/yt.bam mapped_reads/ok.bam;
        samtools sort mapped_reads/ok.bam -o {output.pbam}
        samtools index {output.pbam};
        rm mapped_reads/y.bam;
        rm mapped_reads/yt.bam;
        rm mapped_reads/ok.bam"""

rule medaka_variant:
    input:
        consensus='medaka/{tool}_{species}_{length}_{error_rate}_{param}_concensus.fasta',
        ref='data/ref_{species}.fasta',
        read="mapped_reads/{tool}_{species}_{length}_{error_rate}_{param}.bam"
    output:
        'medaka/{tool}_{species}_{length}_{error_rate}_{param}.vcf'
    conda:
        'env/medaka.yaml'
    shell:
        "medaka variant {input.ref} {input.consensus} {output}"

rule plot_default_command:
    input:
       all_sample_default,
       'calcreads.txt'
    output:
        "plots/default/{species}_{length}_{error_rate}_rl1.pdf",
        "plots/default/{species}_{length}_{error_rate}_rl2.pdf",
        "plots/default/{species}_{length}_{error_rate}_rl3.pdf",
        "plots/default/{species}_{length}_{error_rate}_rl4.pdf",
        "plots/default/{species}_{length}_{error_rate}_rl5.pdf"
    conda:
        "env/plotscript.yaml"
    script:
        'scripts/plot_default.py'

rule plot_allstat_command:
    input:
       two_sample_all
    output:
        "plots/params/{tool}/{tool}_{species}_{length}_{error_rate}_bc1.pdf",
        "plots/params/{tool}/{tool}_{species}_{length}_{error_rate}_bc2.pdf",
        "plots/params/{tool}/{tool}_{species}_{length}_{error_rate}_bc3.pdf"
    conda:
        "env/plotscript.yaml"
    script:
        'scripts/plot_params.py'

rule plot_variant_command:
    input:
       all_sample_best_medaka
    output:
        "plots/variant/{species}_{length}_{error_rate}_bc1.pdf",
    conda:
        "env/plotscript.yaml"
    script:
        'scripts/plot_var.py'

#-------------converst sam-bam-stat rules-------------------------------
rule sam_stat:
    input:
        "mapped_reads/{tool}_{species}_{length}_{error_rate}_{param}.bam"
    output:
        "stat_tools/{tool}_{species}_{length}_{error_rate}_{param}.stat.txt"
    conda:
        "env/samtool.yaml"
    shell:
       "samtools stats {input} > {output}"

rule sam_bam:
    input:
        "mapped_reads/{tool}_{species}_{length}_{error_rate}_{param}.sam"
    output:
        "mapped_reads/{tool}_{species}_{length}_{error_rate}_{param}.bam"
    conda:
        "env/samtool.yaml"
    shell:
       "samtools sort {input} > {output};samtools index {output}"#;rm {input};

rule calcnbreads:
    input:
        expand("data/samples/{species}_{length}_{error_rate}_reads.fastq", species=config['species'],length=config['length'],error_rate=config['error_rate'])
    output:
        'calcreads.txt'
    shell:
        "grep -c '>' {input} >> {output}"
#-------------Tools rules-------------------------------



rule all_bwamem:
    input:
        expand("mapped_reads/bwamem_{species}_{length}_{error_rate}_{param}.sam", species=config['species'],length=config['length'],param=config['param']['bwamem']['command'],error_rate=config['error_rate'])

rule bwamem:
    input:
        ref='data/ref_{species}.fasta',
        reads= 'data/samples/{species}_{length}_{error_rate}_reads.fastq'
    output:
        "mapped_reads/bwamem_{species}_{length}_{error_rate}_{param}.sam"
    conda:
        "env/bwamem.yaml"
    params:
        getparam
    benchmark:
        "benchmarks/bwamem_{species}_{length}_{error_rate}_{param}.benchmark.txt"
    shell:
        "bwa index {input.ref} ;bwa mem -x ont2d {params} -t 2 {input.ref} {input.reads} > {output}"




rule all_minimap2:
    input:
        expand("mapped_reads/minimap2_{species}_{length}_{error_rate}_{param}.sam", species=config['species'],length=config['length'],param=config['param']['minimap2']['command'],error_rate=config['error_rate'])

rule minimap2:
    input:
        ref='data/ref_{species}.fasta',
        reads= 'data/samples/{species}_{length}_{error_rate}_reads.fastq'
    output:
        "mapped_reads/minimap2_{species}_{length}_{error_rate}_{param}.sam"
    conda:
        "env/minimap2.yaml"
    params:
        getparam
    benchmark:
        "benchmarks/minimap2_{species}_{length}_{error_rate}_{param}.benchmark.txt"
    shell:
        "minimap2 -ax map-ont {params} {input.ref} {input.reads} > {output}"

rule all_graphmap2:
    input:
        expand("mapped_reads/graphmap2_{species}_{length}_{error_rate}_{param}.sam",species=config['species'],length=config['length'],param=config['param']['graphmap2']['command'],error_rate=config['error_rate'])

rule graphmap2:
    input:
        ref= 'data/ref_{species}.fasta',
        reads= 'data/samples/{species}_{length}_{error_rate}_reads.fastq'
    output:
        "mapped_reads/graphmap2_{species}_{length}_{error_rate}_{param}.sam"
    conda:
        "env/graphmap2.yaml"
    params:
        getparam
    benchmark:
        "benchmarks/graphmap2_{species}_{length}_{error_rate}_{param}.benchmark.txt"
    shell:
        "graphmap2 align --auto-rebuild-index -r {input.ref} -d {input.reads} {params} > {output}"


rule all_graphmap:
    input:
        expand("mapped_reads/graphmap_{species}_{length}_{error_rate}_{param}.sam",species=config['species'],length=config['length'],param=config['param']['graphmap']['command'],error_rate=config['error_rate'])

rule graphmap:
    input:
        ref= 'data/ref_{species}.fasta',
        reads= 'data/samples/{species}_{length}_{error_rate}_reads.fastq'
    output:
        "mapped_reads/graphmap_{species}_{length}_{error_rate}_{param}.sam"
    conda:
        "env/graphmap.yaml"
    params:
        getparam
    benchmark:
        "benchmarks/graphmap_{species}_{length}_{error_rate}_{param}.benchmark.txt"
    shell:
        "graphmap align -x sensitive -r {input.ref} -d {input.reads} {params} > {output}"


#rule all_mm2f:
   # input:
     #   expand("mapped_reads/mm2f_{species}_{length}_{error_rate}_{param}.sam",species=config['species'],length=config['length'],param=config['param']['mm2f']['command'],error_rate=config['error_rate'])

# rule mm2f:
#     input:
#         ref= 'data/ref_{species}.fasta',
#         reads= 'data/samples/{species}_{length}_{error_rate}_reads.fastq'
#     output:
#         "mapped_reads/mm2f_{species}_{length}_{error_rate}_{param}.sam"
#     params:
#         getparam
#     benchmark:
#         "benchmarks/mm2f_{species}_{length}_{error_rate}_{param}.benchmark.txt"
#     shell:
#         "~/bin/mm2-fast/mm2-fast/minimap2 -ax map-ont {input.ref} {input.reads} > {output}"

rule all_blasr:
    input:
        expand("mapped_reads/blasr_{species}_{length}_{error_rate}_{param}.sam",species=config['species'],length=config['length'],param=config['param']['blasr']['command'],error_rate=config['error_rate'])


rule blasr_temp:
    input:
        ref= 'data/ref_{species}.fasta',
        reads= 'data/samples/{species}_{length}_{error_rate}_reads.fastq'
    output:
        sam=temp("mapped_reads/blasr_{species}_{length}_{error_rate}_{param}_temp.sam"),
        unmap=temp("temp_{species}_{length}_{error_rate}_{param}.txt")
    conda:
        "env/blasr.yaml"
    params:
        getparam
    benchmark:
        "benchmarks/blasr_{species}_{length}_{error_rate}_{param}.benchmark.txt"
    shell:
        "blasr {input.reads} {input.ref} {params} --sam -m 1 --unaligned {output.unmap} --noPrintUnalignedSeqs --out {output.sam}> {output.sam}"

rule blasr:
    input:
        sam="mapped_reads/blasr_{species}_{length}_{error_rate}_{param}_temp.sam",
        unmap=temp("temp_{species}_{length}_{error_rate}_{param}.txt")
    output:
        "mapped_reads/blasr_{species}_{length}_{error_rate}_{param}.sam"
    shell:
        """cat {input.sam}>{output};sed 's/>//' {input.unmap} | sed 's/$/\t4\t\*\t0\t0\t\*\t\*\t0\t0\t\*\t\*\trl:i:0/' >>{output}"""


rule all_winnowmap:
    input:
        expand("mapped_reads/winnowmap2_{species}_{length}_{error_rate}_{param}.sam",species=config['species'],length=config['length'],param=config['param']['winnowmap2']['command'],error_rate=config['error_rate'])


rule winnowmap:
    input:
        ref= 'data/ref_{species}.fasta',
        reads= 'data/samples/{species}_{length}_{error_rate}_reads.fastq',
        meril='repetitive{species}_k10.txt',
    output:
        "mapped_reads/winnowmap2_{species}_{length}_{error_rate}_{param}.sam"
    conda:
        "env/winnowmap.yaml"
    params:
        getparam
    benchmark:
        "benchmarks/winnowmap2_{species}_{length}_{error_rate}_{param}.benchmark.txt"
    shell:
        "winnowmap {params} -W {input.meril} -ax map-ont {input.ref} {input.reads} > {output}"

rule pre_winnowmap_1:
    input:
        ref= 'data/ref_{species}.fasta',
    output:
       'repetitive{species}_k10.txt'
    conda:
        "env/winnowmap.yaml"
    shell:
       """meryl count memory=4 threads=2 k=10 output DB1 {input.ref};
        meryl print greater-than distinct=0.9998 DB1 > {output};
        rm -r DB1"""

rule all_magicblast:
    input:
        expand("mapped_reads/magicblast_{species}_{length}_{error_rate}_{param}.sam",species=config['species'],length=config['length'],param=config['param']['magicblast']['command'],error_rate=config['error_rate'])


rule magicblast:
    input:
        ref= 'data/ref_{species}.fasta',
        reads= 'data/samples/{species}_{length}_{error_rate}_reads.fastq',
    output:
        "mapped_reads/magicblast_{species}_{length}_{error_rate}_{param}.sam"
    conda:
        "env/magicblast.yaml"
    params:
        getparam
    benchmark:
        "benchmarks/magicblast_{species}_{length}_{error_rate}_{param}.benchmark.txt"
    shell:
        "makeblastdb -in {input.ref} -out blastdb/default -parse_seqids -dbtype nucl; magicblast -query {input.reads} -db blastdb/default -infmt fastq {params} -out {output};"

rule all_lra:
    input:
        expand("mapped_reads/magicblast_{species}_{length}_{error_rate}_{param}.sam",species=config['species'],length=config['length'],param=config['param']['lra']['command'],error_rate=config['error_rate'])

rule lra:
    input:
        ref= 'data/ref_{species}.fasta',
        reads= 'data/samples/{species}_{length}_{error_rate}_reads.fastq',
    output:
        "mapped_reads/lra_{species}_{length}_{error_rate}_{param}.sam"
    conda:
        "env/lra.yaml"
    params:
        getparam
    benchmark:
        "benchmarks/lra_{species}_{length}_{error_rate}_{param}.benchmark.txt"
    shell:
        "lra index -ONT {params} {input.ref};lra align -ONT -t 4 -a {input.ref} {input.reads}  -p s > {output};rm {input.ref}.gli;rm {input.ref}.mmi"

rule all_minimapos:
    input:
        expand("mapped_reads/minimapos_{species}_{length}_{error_rate}_{param}.sam", species=config['species'],length=config['length'],param=config['param']['minimapos']['command'],error_rate=config['error_rate'])

rule minimapos:
    input:
        ref='data/ref_{species}.fasta',
        reads= 'data/samples/{species}_{length}_{error_rate}_reads.fastq'
    output:
        "mapped_reads/minimapos_{species}_{length}_{error_rate}_{param}.sam"
    conda:
        "env/minimap2.yaml"
    params:
        getparam
    benchmark:
        "benchmarks/minimapos_{species}_{length}_{error_rate}_{param}.benchmark.txt"
    shell:
        "{path} -ax map-ont {{params}} {{input.ref}} {{input.reads}} > {{output}}".format(path=os.path.join(path_os_minimap,'minimap2'))

rule all_syncminimap:
    input:
        expand("mapped_reads/syncminimap_{species}_{length}_{error_rate}_{param}.sam", species=config['species'],length=config['length'],param=config['param']['syncminimap']['command'],error_rate=config['error_rate'])

rule syncminimap:
    input:
        ref='data/ref_{species}.fasta',
        reads= 'data/samples/{species}_{length}_{error_rate}_reads.fastq'
    output:
        "mapped_reads/syncminimap_{species}_{length}_{error_rate}_{param}.sam"
    conda:
        "env/minimap2.yaml"
    params:
        getparam
    benchmark:
        "benchmarks/syncminimap_{species}_{length}_{error_rate}_{param}.benchmark.txt"
    shell:
        "{path} -ax map-ont {{params}} {{input.ref}} {{input.reads}} > {{output}}".format(path=os.path.join(path_sync_minimap,'minimap2'))

rule all_blend:
    input:
        expand("mapped_reads/blend_{species}_{length}_{error_rate}_{param}.sam", species=config['species'],length=config['length'],param=config['param']['blend']['command'],error_rate=config['error_rate'])

rule blend:
    input:
        ref='data/ref_{species}.fasta',
        reads= 'data/samples/{species}_{length}_{error_rate}_reads.fastq'
    output:
        "mapped_reads/blend_{species}_{length}_{error_rate}_{param}.sam"
    conda:
        "env/minimap2.yaml"
    params:
        getparam
    benchmark:
        "benchmarks/blend_{species}_{length}_{error_rate}_{param}.benchmark.txt"
    shell:
        "{path} -ax map-ont {{params}} {{input.ref}} {{input.reads}} > {{output}}".format(path=os.path.join(path_blend,'blend'))


rule all_blast:
    input:
        expand("mapped_reads/blast_{species}_{length}_{error_rate}_{param}.sam",species=config['species'],length=config['length'],param=config['param']['magicblast']['command'],error_rate=config['error_rate'])


# rule blast:
#     input:
#         ref= 'data/ref_{species}.fasta',
#         reads= 'data/samples/{species}_{length}_{error_rate}_reads.fastq',
#     output:
#         "mapped_reads/blast_{species}_{length}_{error_rate}_{param}.blastsam"
#     conda:
#         "env/blast.yaml"
#     params:
#         getparam
#     benchmark:
#         "benchmarks/blast_{species}_{length}_{error_rate}_{param}.benchmark.txt"
#     shell:
#         "makeblastdb -in {input.ref} -out blast2db/default -parse_seqids -dbtype nucl; blastn -query {input.reads} -db blast2db/default {params} -out {output};rm blast2db -r;"

rule build_dict:
    input:
        'data/ref_{species}.fasta'
    output:
        'data/ref_{species}.dict'
    conda:
        'env/samtool.yaml'
    shell:
        "samtools faidx {input} ;picard CreateSequenceDictionary -R {input} -O {output}"

rule blast_to_sam:
    input:
        ref='data/ref_{species}.dict',
        files="mapped_reads/blast_{species}_{length}_{error_rate}_{param}.blastsam"
    output:
        "mapped_reads/blast_{species}_{length}_{error_rate}_{param}.sam"
    conda:
        'env/samtool.yaml'
    shell:
        """touch {{input.ref}};java -jar {path} {{input.files}} -r {{input.ref}} | iconv -f utf-8 -t utf-8 -c | awk -v ref=$(awk -F '\t' 'NR==2{{{{print substr($2,4)}}}}' {{input.ref}}) -F '\t' 'BEGIN{{{{OFS="\t"}}}} NF>10 {{{{$3=ref}}}} {{{{print}}}}'> {{output}}""".format(path=os.path.join(path_blast2sam,'blast2sam.jar')) 

#-------------------------------build_file----------------------------------


# rule all_ve:
#     input:
#         expand("result/pbsim2/{species}_{length}_{error_rate}_reads.fastq",species=config['species'],length=config['size'],error_rate=config['error_rate'])

# rule nano:
#     input:
#         expand("result/nano/{species}_{length}_0_reads.fastq",species=['vih'],length=config['size'])

# rule all_nano:
#     input:
#         expand("result/nano/{species}__{length}_0_reads.fastq",species=['vih'],length=config['size'],variant=config['variant']['number'])

rule mvfiles:
    input:
        "result/pbsim2/{species}_{length}_{error_rate}_variantreads.fastq"
    output:
        "data/samples/{species}_{length}_{error_rate}_reads.fastq",
        "data/perfect/{species}_{length}_{error_rate}_perfect.sam"
    conda:
        "envs/pyt.yaml"
    script:
        "script/moveclear.py"
rule all_pb:
    input:
        expand("result/pbsim2/{species}_{length}_{error_rate}_variantreads.fastq",species=config['species'],length=config['length'],error_rate=config['error_rate'],variant=config['variant']['number'])


rule build_readsvariant:
    input:
        expand("result/pbsim2/{{species}}_{variant}_{{length}}_{{error_rate}}_reads.fastq",variant=VARIANT),
    output:
        temp("result/pbsim2/{species}_{length}_{error_rate}_variantreads1.fastq")
    conda:
        "envs/pbsim.yaml"
    script:
        'script/buildvariant.py'


rule add_human:
    input:
        human='data/supl/human_read.fastq',
        data="result/pbsim2/{species}_{length}_{error_rate}_variantreads1.fastq",
    output:
       "result/pbsim2/{species}_{length}_{error_rate}_variantreads.fastq"
    conda:
        "envs/pyt.yaml"
    script:
        'script/select_human_pbsim.py'

checkpoint build_variant: 
    input:
        ref="data/ref_{species}.fasta"
    output:
        expand('data/ref_{{species}}_{variant}.fasta',variant=VARIANT)
    conda: 
        "envs/pyt.yaml"
    script:
        'script/variant_maker.py'
        
#----------rule for pbsim-----------------
rule simu_phase:
    input:
        ref="data/ref_{species}_{variant}.fasta",
        model="data/supl/R103.model"
    wildcard_constraints:
        species="[a-z]*"
    conda:
        "envs/pbsim.yaml"
    output:
        temp("result/pbsim2/simu_{species}_{variant}_{length}_{error_rate}")#temp("simu_{species}")
    params:
        number=config['number'],
        seed= config['seed'],
        tsize='{length}',
        er='{error_rate}'
    shell:
        "pbsim --depth {params.number} --prefix {output} --length-mean {params.tsize}  --length-sd 50  --accuracy-mean {params.er} --difference-ratio 23:31:46 --seed {params.seed} --hmm_model {input.model} {input.ref};touch {output}"



rule convert_phase:
    input:
        "result/pbsim2/simu_{species}_{variant}_{length}_{error_rate}"
    output:
        temp("result/pbsim2/simulated_{species}_{variant}_{length}_{error_rate}")#temp("simu_{species}")
    conda:
        "envs/pyt.yaml"
    script:
        'script/convert_name.py'


rule pre_perfect:
    input:
        data='result/pbsim2/simulated_{species}_{variant}_{length}_{error_rate}',
        todel='result/pbsim2/simu_{species}_{variant}_{length}_{error_rate}'
    output:
        temp('result/pbsim2/simu_{species}_{variant}_{length}_{error_rate}_0001_corrected.maf')
    conda:
        'envs/pyt.yaml'
    script:
        'script/correct_sam.py'

rule build_perfect:
    input:
        data='result/pbsim2/simulated_{species}_{variant}_{length}_{error_rate}',
        cor='result/pbsim2/simu_{species}_{variant}_{length}_{error_rate}_0001_corrected.maf'
    output:
        'perfect_sam/{species}_{variant}_{length}_{error_rate}.sam'
    conda:
        'envs/last.yaml'
    shell:
        'maf-convert --dictionary -n sam {input.cor} > {output};'




rule underscore:
    input:
        link="result/{tool}/simulated_{species}_{variant}_{length}_{error_rate}",
    output:
        temp("result/{tool}/{species}_{variant}_{length}_{error_rate}_reads1.fasta")
    shell:
        "sed -i -e 's/ //g' {input.link};sed -i -e 's/;/_/g' {input.link}> {output}"

rule convert_header:
    input:
        link="result/{tool}/{species}_{variant}_{length}_{error_rate}_reads1.fasta",
        read="result/{tool}/simulated_{species}_{variant}_{length}_{error_rate}",
        samperfert='perfect_sam/{species}_{variant}_{length}_{error_rate}.sam',
    output:
        temp("result/{tool}/{species}_{variant}_{length}_{error_rate}_readsinco.fastq")
    conda:
        'envs/perl.yaml'
    shell:
        'script/convert1.pl {input.read} >{output}'
        
rule one_line:
    input: 
        "result/{tool}/{species}_{variant}_{length}_{error_rate}_readsinco.fastq"
    output:
        temp("result/{tool}/{species}_{variant}_{length}_{error_rate}_reads.fastq")
    shell:
        "cat {input}>{output}"
        #"""awk '/^>/ {{printf("\\n%s\\n",$0);next; }} {{ printf("%s",$0);}}  END {{printf("\\n");}}' < {input} | tail -n +2 > {output}"""

rule add_human2:
    input:
        human='data/supl/human_read.fastq',
        data="result/pbsim2/{species}_{variant}_{length}_{error_rate}_reads.fastq",
        todel='result/pbsim2/simu_{species}_{variant}_{length}_{error_rate}',
        att= "result/pbsim2/{species}_{length}_{error_rate}_variantreads.fastq"
        
    output:
       "result/pbsim2/{species}_{length}_{error_rate}_readshuman.fastq"
    conda:
        "envs/pyt.yaml"
    script:
        'script/select_human_pbsim.py'
#----------rule for nanosim-----------------
rule analyse_phase:
    input:
        ref="data/ref_{species}.fasta",
        read="data/read_{species}.fastq"
    conda:
        "envs/nanosim.yaml"
    output:
        "result/nano/temp/simu_{species}"
    shell:
        "read_analysis.py genome -i {input.read} -rg {input.ref} -o {output} -t 24 ;touch {output}"


rule simu_phase_nano:
    input:
        ref="data/ref_{species}.fasta",
        folder="result/nano/temp/simu_{species}"
    conda: 
        "envs/nanosim.yaml"
    output:
       temp( "result/nano/simulated_{species}_{length}")
    params:
        number=autocoverage,
        seed= config['seed'],
        tsize='{length}'
    shell:
        "simulator.py genome -rg {input.ref} -c {input.folder} -o {output} -n {params.number} -max {params.tsize} -t 24 --seed {params.seed};touch {output}"

rule add_human_nano:
    input:
        human='data/supl/human_read.fastq',
        data='result/nano/simulated_{species}_{length}'
    output:
        temp("result/nano/mv_done_{species}_{length}_human")
    conda:
        "envs/pyt.yaml"
    script:
        'script/select_human_nanosim.py'

rule rename_nano:
    input:
        tmp='result/nano/mv_done_{species}_{length}_human',
    
    output:
        out1=temp("result/nano/done_{species}_{length}_0_human"),
        out2=temp("result/nano/simulated_{species}_{length}_0")
    shell:
        "mv result/nano/simulated_{wildcards.species}_{wildcards.length}_aligned_reads.fastq {output.out2};touch {output.out1}"

onsuccess:
    shell('if [[ -d result/nano/temp ]]; then rm result/nano/temp -r ;fi')



onsuccess:
    shell('if ls data/*.fasta.gmidx 2>/dev/null 1>&2;then rm data/*.fasta.gmidx ;fi;if [[ -d blastdb ]]; then rm blastdb -r ;fi')


