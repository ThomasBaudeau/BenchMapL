import os
# config file name



configfile: '../config/config_test.yaml'
TOOLS= [tool for tool in config['param']]
#Path

path_tool = "../../"
path_maketool = os.path.join(path_tool,"PipTool")
path_os_minimap=os.path.join(path_maketool,"os-minimap2")
path_sync_minimap=os.path.join(path_maketool,"syncmer_minimap")
path_blend=os.path.join(path_maketool,"blend/bin")
path_blast2sam=os.path.join(path_tool,"../bin/Blast2sam/jvarkit/dist/")
#Function

def autoasm(wildcards):
    li_taux=config['variant']['specify']
    ok=wildcards.variant
    asmdic={3:'20',0.99:'10'}
    print(ok)
    if ok=='WT':
        return 'asm5'
    else:
        nbvar=li_taux[int(ok.replace('V',''))]
        print(nbvar)
        for i in [3,0.99]:
            if nbvar >=i:
                print(asmdic[i])
                return 'asm'+ asmdic[i] 
    return 'asm5'
   

def rtaille(sp):
    taille={'covid':29800,'vih':9000}
    return taille[sp]


def autocoverage(wildcards):
    return int(((rtaille(wildcards.species)*int(config['number']))/(int(wildcards.length)/2)))

def getparamk(wildcards):
    temp = wildcards.param.split("#")
    for x,i in enumerate(temp):
        if i =="-k":
            return temp[x+1]
    return '15'

def getparam(wildcards):
    return wildcards.param.replace("#", ' ').replace('ยง', '_')

def variant(wildcards):
    species=config['species']
    var=['WT'] 
    for i in range(config['variant']['number']):
        var.append('V'+str(i))
    return var

VARIANT=variant(config)

def lmin(wildcards):
    return str(int(int(wildcards.length)*0.90))

def lmax(wildcards):
    return str(int(int(wildcards.length)*1.10))


#----------------------------makeresultorgraph---------------------------------------

if config['realdata']:



    def all_sample_medaka(wildcards):
        ret=[]
        a= expand( "medaka/{tool}_{species}_{length}_{error_rate}_{param}.vcf",zip,tool=TOOLS,allow_missing=True)
        for elem in a:
            for specie in config['species']:
                for length in config['length']:
                    for er in config['error_rate']:
                        for i in range(len(config['param'][elem[7:elem.find('_',7)]]['command'])):
                            b=elem.replace('{species}',specie)
                            b=b.replace('{error_rate}',er)
                            b=b.replace('{length}',str(length))
                            b=b.replace('{param}',config['param'][elem[7:elem.find('_',7)]]['command'][i])
                            ret.append(b)
        return ret


    def all_sample_medaka_vcdist(wildcards):
        ret=[]
        a= expand('medaka/vcfdist_{tool}_{species}_{length}_{error_rate}_{param}_precision-recall-summary.tsv',zip,tool=TOOLS,allow_missing=True)
        for elem in a:
            for specie in config['species']:
                for length in config['length']:
                    for er in config['error_rate']:
                        for i in range(len(config['param'][elem[15:elem.find('_',15)]]['command'])):
                            b=elem.replace('{species}',specie)
                            b=b.replace('{error_rate}',er)
                            b=b.replace('{length}',str(length))
                            b=b.replace('{param}',config['param'][elem[15:elem.find('_',15)]]['command'][i])
                            ret.append(b)
        return ret
else:
    ruleorder: add_human > convert_header 
    ruleorder: all_stats_csv >plot_default_command>plot_allstat_command>plot_best_command

    def all_sample_medaka(wildcards):
        ret=[]
        a= expand( "medaka/{tool}_{species}_{length}_{error_rate}_{param}.vcf",zip,tool=TOOLS,allow_missing=True)
        for elem in a:
            for specie in config['species']:
                for length in config['length']:
                    for er in config['error_rate']:
                        for i in range(len(config['param'][elem[7:elem.find('_',7)]]['command'])):
                            b=elem.replace('{species}',specie)
                            b=b.replace('{error_rate}',er)
                            b=b.replace('{length}',str(length))
                            b=b.replace('{param}',config['param'][elem[7:elem.find('_',7)]]['command'][i])
                            ret.append(b)
        for specie in config['species']:
                    for length in config['length']:
                        for er in config['error_rate']:             
                            ret.append('medaka/perfect_{species}_{alength}_{error_rate}_perfect.vcf'.format(species=specie,alength=str(length),error_rate=er)) 
        return ret

    def all_sample_medaka_vcdist(wildcards):
        ret=[]
        a= expand('medaka/vcfdist_{tool}_{species}_{length}_{error_rate}_{param}_precision-recall-summary.tsv',zip,tool=TOOLS,allow_missing=True)
        for elem in a:
            for specie in config['species']:
                for length in config['length']:
                    for er in config['error_rate']:
                        for i in range(len(config['param'][elem[15:elem.find('_',15)]]['command'])):
                            b=elem.replace('{species}',specie)
                            b=b.replace('{error_rate}',er)
                            b=b.replace('{length}',str(length))
                            b=b.replace('{param}',config['param'][elem[15:elem.find('_',15)]]['command'][i])
                            ret.append(b)
        for specie in config['species']:
                    for length in config['length']:
                        for er in config['error_rate']:             
                            ret.append('medaka/vcfdist_perfect_{species}_{alength}_{error_rate}_perfect_precision-recall-summary.tsv'.format(species=specie,alength=str(length),error_rate=er)) 
        # return ret
        return ret
    


def exparam(wildcards):
    return expand("mapped_reads/{{tool}}_{{species}}_{{length}}_{{error_rate}}_{param}.bam",param=config['param'][wildcards.tool]['command'])

def all_bam_best(wildcards):
    ret=[]
    a= expand( "mapped_reads/{tool}_{{species}}_{{length}}_{{error_rate}}_{param}.bam",zip,tool=TOOLS, allow_missing=True)
    for elem in a:
        for i in range(len(config['param'][elem[13:elem.find('_',13)]]['command'])):
                if '*' in config['param'][elem[13:elem.find('_',13)]]['name'][i]:
                    b=elem.replace('{param}',config['param'][elem[13:elem.find('_',13)]]['command'][i])
                    ret.append(b)




def all_bam_default(wildcards):
    ret=[]
    a= expand( "mapped_reads/{tool}_{{species}}_{{length}}_{{error_rate}}_{param}.bam",zip,tool=TOOLS, allow_missing=True)
    for elem in a:
        b=elem.replace('{param}',config['param'][elem[13:elem.find('_',13)]]['command'][0])
        ret.append(b)
    return ret

rule plot_best_command:
    input:
       a=all_bam_best,
       b='resultfinal/results.csv',
       okok=expand('data/ref_{{species}}_{variant}_result.csv',variant=VARIANT)
    output:
        "plots/best/{species}_{length}_{error_rate}_rl1.pdf",
        "plots/best/{species}_{length}_{error_rate}_rl2.pdf",
        "plots/best/{species}_{length}_{error_rate}_rl22.pdf",
        "plots/best/{species}_{length}_{error_rate}_rl3.pdf",
        "plots/best/{species}_{length}_{error_rate}_rl4.pdf",
        "plots/best/{species}_{length}_{error_rate}_rl5.pdf",
        "plots/best/{species}_{length}_{error_rate}_rl6.pdf"
    conda:
        "env/plotscript.yaml"
    script:
        'scripts/plot_default.py'

rule plot_default_command:
    input:
       a=all_bam_default,
       b='resultfinal/results.csv'
    output:
        "plots/default/{species}_{length}_{error_rate}_rl1.pdf",
        "plots/default/{species}_{length}_{error_rate}_rl2.pdf",
        "plots/default/{species}_{length}_{error_rate}_rl22.pdf",
        "plots/default/{species}_{length}_{error_rate}_rl3.pdf",
        "plots/default/{species}_{length}_{error_rate}_rl4.pdf",
        "plots/default/{species}_{length}_{error_rate}_rl5.pdf",
        "plots/default/{species}_{length}_{error_rate}_rl6.pdf"
    conda:
        "env/plotscript.yaml"
    script:
        'scripts/plot_default.py'

rule plot_allstat_command:
    input:
        a=exparam,
        b='resultfinal/results.csv'
    output:
        "plots/params/{tool}/{tool}_{species}_{length}_{error_rate}_bc1.pdf",
        "plots/params/{tool}/{tool}_{species}_{length}_{error_rate}_bc2.pdf",
        "plots/params/{tool}/{tool}_{species}_{length}_{error_rate}_bc3.pdf",
        "plots/params/{tool}/{tool}_{species}_{length}_{error_rate}_bc4.pdf"
    conda:
        "env/plotscript.yaml"
    script:
        'scripts/plot_params.py'



rule all_stats_csv:
    input:
        a=all_sample_medaka,
        b=all_sample_medaka_vcdist
    output:
        'resultfinal/results.csv'
    conda:
       "env/plotscript.yaml"
    script:
       'scripts/all_stats.py'


rule run_corcigar:
    input: 
        all_sample_medaka
    output:
        'resultfinal/corcigaroverall.txt'
    conda:
        'env/cigcor.yaml'
    script:
        'scriptcigar/snake_over.py'


#-----------------------------startrule---------------------------------------
if config['realdata']:
    rule all:
        input:
            'resultfinal/results.csv', expand( "plots/default/{species}_{length}_{error_rate}_rl{num}.pdf", species=config['species'],length=config['length'],num=['1','2','3','4','5','6'],error_rate=config['error_rate']),expand( "plots/params/{tool}/{tool}_{species}_{length}_{error_rate}_bc{num}.pdf",tool=TOOLS, species=config['species'],length=config['length'],num=['1','2','3'],error_rate=config['error_rate'])


else:
    rule all:
        input:
            'resultfinal/results.csv','resultfinal/corcigaroverall.txt', expand( "plots/default/{species}_{length}_{error_rate}_rl{num}.pdf", species=config['species'],length=config['length'],num=['1','2','3','4','5','6'],error_rate=config['error_rate']),expand( "plots/params/{tool}/{tool}_{species}_{length}_{error_rate}_bc{num}.pdf",tool=TOOLS, species=config['species'],length=config['length'],num=['1','2','3'],error_rate=config['error_rate'])


rule run_default:
    input :
       expand( "plots/default/{species}_{length}_{error_rate}_rl{num}.pdf", species=config['species'],length=config['length'],num=['1','2','3','4','5','6'],error_rate=config['error_rate'])

rule run_params:
    input :
       expand( "plots/params/{tool}/{tool}_{species}_{length}_{error_rate}_bc{num}.pdf",tool=TOOLS, species=config['species'],length=config['length'],num=['1','2','3'],error_rate=config['error_rate'])


#----------------------medakarule-------------------------------------
rule medaka_concensus:
    input:
        ref='data/ref_{species}.fasta',
        read="mapped_reads/{tool}_{species}_{length}_{error_rate}_{param}.bam"
    output:
        temp('medaka/{tool}_{species}_{length}_{error_rate}_{param}_concensus.fasta')
    params:
        model='data/model/'+config['model_m']+'_min_high_g360_model.hdf5',
    conda:
        'env/medaka.yaml'
    shell:
        "medaka consensus {input.read} {output} --model {params.model} --batch_size 100 --threads 1"#"touch {output}"


rule make_bed:
    input:
        'data/ref_{species}.fasta'
    output:
        'data/ref_{species}.bed'
    script:
        'scripts/bed_maker_without_tail.py'


rule medaka_variant:
    input:
        consensus='medaka/{tool}_{species}_{length}_{error_rate}_{param}_concensus.fasta',
        ref='data/ref_{species}.fasta',
        read="mapped_reads/{tool}_{species}_{length}_{error_rate}_{param}.bam",
        fneed='bcf/{tool}_{species}_{length}_{error_rate}_{param}.vcf',
        #fneed2='clair3/{tool}_{species}_{length}_{error_rate}_{param}.vcf'
    output:
        temp('medaka/{tool}_{species}_{length}_{error_rate}_{param}_temp.vcf'),
    conda:
        'env/medaka.yaml'
    shell:
        "medaka variant {input.ref} {input.consensus} {output}"#"touch {output}"


# rule index_zip_var_medaka:
#     input:
#         'medaka/{tool}_{species}_{length}_{error_rate}_{param}.vcf'
#     output:
#         'medaka/{tool}_{species}_{length}_{error_rate}_{param}.vcf',
#         'medaka/{tool}_{species}_{length}_{error_rate}_{param}.vcf.tbi'#)temp(
#     conda:
#         "env/tabix.yaml"
#     shell:
#         "tabix -f -p vcf {output.a}"
   


rule bcf_variant:
    input:
        ref='data/ref_{species}.fasta',
        bam="mapped_reads/{tool}_{species}_{length}_{error_rate}_{param}.bam"
    output:
        temp('bcf/{tool}_{species}_{length}_{error_rate}_{param}_temp.vcf')
    conda:
        'env/bcf.yaml'
    shell:
        'bcftools mpileup -Ou -f {input.ref} {input.bam} | bcftools call -mv -Ob -o {output}'


# rule clair3_variant:
#     input:
#         ref='data/ref_{species}.fasta',
#         bam="mapped_reads/{tool}_{species}_{length}_{error_rate}_{param}.bam"
#     output:
#         temp('clair3/{tool}_{species}_{length}_{error_rate}_{param}_temp.vcf')
#     conda:
#         'env/clair3.yaml'
#     threads:8
#     params:
#         apath='clair3/{tool}_{species}_{length}_{error_rate}_{param}'
#     shell:
#         'run_clair3.sh -b {input.bam} -f {input.ref} -m ${{CONDA_PREFIX}}/bin/models/r941_prom_hac_g360+g422 -t 6 -p ont --chunk_size=5000 --include_all_ctgs -o {params.apath};gunzip {params.apath}/merge_output.vcf.gz; mv {params.apath}/merge_output.vcf {output};rm -rf {params.apath}'

#run_clair3.sh -b test_perfect_bam -f data/ref_covid.fasta -m ${CONDA_PREFIX}/bin/models/r941_prom_hac_g360+g422 -t 6 -p ont --chunk_size=5000 --include_all_ctgs -o
# rule final_variant_clair3:
#     input:
#         vcf= 'clair3/{tool}_{species}_{length}_{error_rate}_{param}_temp.vcf',
#         bed='data/ref_{species}.bed'
#     output:
#         'clair3/{tool}_{species}_{length}_{error_rate}_{param}.vcf'
#     conda:
#         'env/bedtools.yaml'
#     shell:
#         'bedtools intersect -a {input.vcf} -b {input.bed} -header> {output}'

rule final_variant_medaka:
    input:
        vcf='medaka/{tool}_{species}_{length}_{error_rate}_{param}_temp.vcf',
        bed='data/ref_{species}.bed'
    output:
        'medaka/{tool}_{species}_{length}_{error_rate}_{param}.vcf'
    conda:
        'env/bedtools.yaml'
    shell:
        'bedtools intersect -a {input.vcf} -b {input.bed} -header> {output}'

rule final_variant_bcf:
    input:
        vcf= 'bcf/{tool}_{species}_{length}_{error_rate}_{param}_temp.vcf',
        bed='data/ref_{species}.bed'
    output:
        'bcf/{tool}_{species}_{length}_{error_rate}_{param}.vcf'
    conda:
        'env/bedtools.yaml'
    shell:
        'bedtools intersect -a {input.vcf} -b {input.bed} -header > {output}'

# rule index_zip_var_bcf:
#     input:
    #     'bcf/{tool}_{species}_{length}_{error_rate}_{param}.vcf'
    # output:
    #     'bcf/{tool}_{species}_{length}_{error_rate}_{param}.vcf',
    #     'bcf/{tool}_{species}_{length}_{error_rate}_{param}.vcf.tbi'#)temp(
    # conda:
    #     "env/tabix.yaml"
    # shell:
    #     "cat {input};bgzip -c {input} > {output.a};tabix -f -p vcf {output.a}"
   

rule vcfdist_bcf:
    input:
        ref='data/ref_{species}.fasta',
        querry='bcf/{tool}_{species}_{length}_{error_rate}_{param}.vcf',
        GT='data/ref_{species}_agregate.vcf.gz',
    output:
        temp('bcf/vcfdist_{tool}_{species}_{length}_{error_rate}_{param}_parameters.txt'),
        temp('bcf/vcfdist_{tool}_{species}_{length}_{error_rate}_{param}_phase-blocks.tsv'),
        temp('bcf/vcfdist_{tool}_{species}_{length}_{error_rate}_{param}_phasing-summary.tsv'),
        'bcf/vcfdist_{tool}_{species}_{length}_{error_rate}_{param}_precision-recall-summary.tsv',
        temp('bcf/vcfdist_{tool}_{species}_{length}_{error_rate}_{param}_precision-recall.tsv'),
        'bcf/vcfdist_{tool}_{species}_{length}_{error_rate}_{param}_query.tsv',
        temp('bcf/vcfdist_{tool}_{species}_{length}_{error_rate}_{param}_summary.vcf'),
        temp('bcf/vcfdist_{tool}_{species}_{length}_{error_rate}_{param}_superclusters.tsv'),
        temp('bcf/vcfdist_{tool}_{species}_{length}_{error_rate}_{param}_switchflips.tsv'),
        temp('bcf/vcfdist_{tool}_{species}_{length}_{error_rate}_{param}_truth.tsv')
    params:
        prefix='bcf/vcfdist_{tool}_{species}_{length}_{error_rate}_{param}_'

    conda:
        'env/tabix.yaml'
    shell:
        'vcfdist {input.querry} {input.GT} {input.ref} -p {params.prefix}  '


# rule vcfdist_clair3:
#     input:
#         ref='data/ref_{species}.fasta',
#         querry='clair3/{tool}_{species}_{length}_{error_rate}_{param}.vcf',
#         GT='data/ref_{species}_agregate.vcf.gz',
#     output:
#         temp('clair3/vcfdist_{tool}_{species}_{length}_{error_rate}_{param}_parameters.txt'),
#         temp('clair3/vcfdist_{tool}_{species}_{length}_{error_rate}_{param}_phase-blocks.tsv'),
#         temp('clair3/vcfdist_{tool}_{species}_{length}_{error_rate}_{param}_phasing-summary.tsv'),
#         temp('clair3/vcfdist_{tool}_{species}_{length}_{error_rate}_{param}_precision-recall.tsv'),
#         'clair3/vcfdist_{tool}_{species}_{length}_{error_rate}_{param}_query.tsv',
#         'clair3/vcfdist_{tool}_{species}_{length}_{error_rate}_{param}_precision-recall-summary.tsv',
#         temp('clair3/vcfdist_{tool}_{species}_{length}_{error_rate}_{param}_summary.vcf'),
#         temp('clair3/vcfdist_{tool}_{species}_{length}_{error_rate}_{param}_superclusters.tsv'),
#         temp('clair3/vcfdist_{tool}_{species}_{length}_{error_rate}_{param}_switchflips.tsv'),
#         temp('clair3/vcfdist_{tool}_{species}_{length}_{error_rate}_{param}_truth.tsv')
#     params:
#         prefix='clair3/vcfdist_{tool}_{species}_{length}_{error_rate}_{param}_'

#     conda:
#         'env/tabix.yaml'
#     shell:
#         'vcfdist {input.querry} {input.GT} {input.ref} -p {params.prefix}  '


rule vcfdist_medaka:
    input:
        ref='data/ref_{species}.fasta',
        querry='medaka/{tool}_{species}_{length}_{error_rate}_{param}.vcf',
        GT='data/ref_{species}_agregate.vcf.gz',
        ok='bcf/vcfdist_{tool}_{species}_{length}_{error_rate}_{param}_precision-recall-summary.tsv',
        ok2='bcf/vcfdist_{tool}_{species}_{length}_{error_rate}_{param}_query.tsv',
        #ok3='clair3/vcfdist_{tool}_{species}_{length}_{error_rate}_{param}_precision-recall-summary.tsv'

    output:
        temp('medaka/vcfdist_{tool}_{species}_{length}_{error_rate}_{param}_parameters.txt'),
        temp('medaka/vcfdist_{tool}_{species}_{length}_{error_rate}_{param}_phase-blocks.tsv'),
        temp('medaka/vcfdist_{tool}_{species}_{length}_{error_rate}_{param}_phasing-summary.tsv'),
        'medaka/vcfdist_{tool}_{species}_{length}_{error_rate}_{param}_precision-recall-summary.tsv',
        temp('medaka/vcfdist_{tool}_{species}_{length}_{error_rate}_{param}_precision-recall.tsv'),
        'medaka/vcfdist_{tool}_{species}_{length}_{error_rate}_{param}_query.tsv',
        temp('medaka/vcfdist_{tool}_{species}_{length}_{error_rate}_{param}_summary.vcf'),
        temp('medaka/vcfdist_{tool}_{species}_{length}_{error_rate}_{param}_superclusters.tsv'),
        temp('medaka/vcfdist_{tool}_{species}_{length}_{error_rate}_{param}_switchflips.tsv'),
        temp('medaka/vcfdist_{tool}_{species}_{length}_{error_rate}_{param}_truth.tsv')
    params:
        prefix='medaka/vcfdist_{tool}_{species}_{length}_{error_rate}_{param}_'

    conda:
        'env/tabix.yaml'
    shell:
        'vcfdist {input.querry} {input.GT} {input.ref} -p {params.prefix} '

#-------------converst sam-bam-stat rules-------------------------------
rule sam_stat:
    input:
        "mapped_reads/{tool}_{species}_{length}_{error_rate}_{param}.bam"
    output:
        "stat_tools/{tool}_{species}_{length}_{error_rate}_{param}.stat.txt"
    conda:
        "env/samtool.yaml"
    shell:
       "samtools stats {input} > {output}"

if config['cig_modif']:
    rule sam_bam:
        input:
            "mapped_reads/{tool}_{species}_{length}_{error_rate}_{param}_corrected.sam"
        output:
            "mapped_reads/{tool}_{species}_{length}_{error_rate}_{param}.bam"
        conda:
            "env/samtool.yaml"
        shell:
            "samtools sort {input} > {output};samtools index {output}"#;rm {input};

    rule change_cigar:
        input:
            a="mapped_reads/{tool}_{species}_{length}_{error_rate}_{param}.sam",
            b="mapped_reads/minimap2_{species}_{length}_{error_rate}_#.sam"
        output:
            "mapped_reads/{tool}_{species}_{length}_{error_rate}_{param}_corrected.sam"
        conda:
            "env/plotscript.yaml"
        script:
            "script/correct_bam.py"#;rm {input};


else:
    rule sam_bam:
        input:
            "mapped_reads/{tool}_{species}_{length}_{error_rate}_{param}.sam"
        output:
            "mapped_reads/{tool}_{species}_{length}_{error_rate}_{param}.bam"
        conda:
            "env/samtool.yaml"
        shell:
            "samtools sort {input} > {output};samtools index {output}"#;rm {input};

rule calcnbreads:
    input:
        expand("data/samples/{species}_{length}_{error_rate}_reads.fastq", species=config['species'],length=config['length'],error_rate=config['error_rate'])
    output:
        'calcreads.txt'
    shell:
        "grep -c '>' {input} >> {output}"


#-------------Tools rules-------------------------------



rule all_bwamem:
    input:
        expand("mapped_reads/bwamem_{species}_{length}_{error_rate}_{param}.sam", species=config['species'],length=config['length'],param=config['param']['bwamem']['command'],error_rate=config['error_rate'])

rule bwamem:
    input:
        ref='data/ref_{species}.fasta',
        reads= 'data/samples/{species}_{length}_{error_rate}_reads.fastq'
    output:
        "mapped_reads/bwamem_{species}_{length}_{error_rate}_{param}.sam"
    conda:
        "env/bwamem.yaml"
    params:
        getparam
    benchmark:
        "benchmarks/bwamem_{species}_{length}_{error_rate}_{param}.benchmark.txt"
    shell:
        "bwa index {input.ref} ;bwa mem -x ont2d {params} -t 2 {input.ref} {input.reads} > {output}"




rule all_minimap2:
    input:
        expand("mapped_reads/minimap2_{species}_{length}_{error_rate}_{param}.sam", species=config['species'],length=config['length'],param=config['param']['minimap2']['command'],error_rate=config['error_rate'])

rule minimap2:
    input:
        ref='data/ref_{species}.fasta',
        reads= 'data/samples/{species}_{length}_{error_rate}_reads.fastq'
    output:
        "mapped_reads/minimap2_{species}_{length}_{error_rate}_{param}.sam"
    conda:
        "env/minimap2.yaml"
    params:
        getparam
    benchmark:
        "benchmarks/minimap2_{species}_{length}_{error_rate}_{param}.benchmark.txt"
    shell:
        "minimap2 -ax map-ont {params} {input.ref} {input.reads} > {output}"


rule all_minimap2old_old:
    input:
        expand("mapped_reads/minimap2old_{species}_{length}_{error_rate}_{param}.sam", species=config['species'],length=config['length'],param=config['param']['minimap2']['command'],error_rate=config['error_rate'])

rule minimap2old:
    input:
        ref='data/ref_{species}.fasta',
        reads= 'data/samples/{species}_{length}_{error_rate}_reads.fastq'
    output:
        "mapped_reads/minimap2old_{species}_{length}_{error_rate}_{param}.sam"
    conda:
        "env/minimap2old.yaml"
    params:
        getparam
    benchmark:
        "benchmarks/minimap2_{species}_{length}_{error_rate}_{param}.benchmark.txt"
    shell:
        "minimap2 -ax map-ont {params} {input.ref} {input.reads} > {output}"


# rule all_graphmap2:
#     input:
#         expand("mapped_reads/graphmap2_{species}_{length}_{error_rate}_{param}.sam",species=config['species'],length=config['length'],param=config['param']['graphmap2']['command'],error_rate=config['error_rate'])

# rule graphmap2:
#     input:
#         ref= 'data/ref_{species}.fasta',
#         reads= 'data/samples/{species}_{length}_{error_rate}_reads.fastq'
#     output:
#         "mapped_reads/graphmap2_{species}_{length}_{error_rate}_{param}.sam"
#     conda:
#         "env/graphmap2.yaml"
#     params:
#         getparam
#     benchmark:
#         "benchmarks/graphmap2_{species}_{length}_{error_rate}_{param}.benchmark.txt"
#     shell:
#         "graphmap2 align --auto-rebuild-index -r {input.ref} -d {input.reads} {params} > {output}"


rule all_graphmap:
    input:
        expand("mapped_reads/graphmap_{species}_{length}_{error_rate}_{param}.sam",species=config['species'],length=config['length'],param=config['param']['graphmap']['command'],error_rate=config['error_rate'])

rule graphmap:
    input:
        ref= 'data/ref_{species}.fasta',
        reads= 'data/samples/{species}_{length}_{error_rate}_reads.fastq'
    output:
        "mapped_reads/graphmap_{species}_{length}_{error_rate}_{param}.sam"
    conda:
        "env/graphmap.yaml"
    params:
        getparam
    benchmark:
        "benchmarks/graphmap_{species}_{length}_{error_rate}_{param}.benchmark.txt"
    shell:
        "graphmap align -x sensitive -r {input.ref} -d {input.reads} {params} > {output}"


#rule all_mm2f:
   # input:
     #   expand("mapped_reads/mm2f_{species}_{length}_{error_rate}_{param}.sam",species=config['species'],length=config['length'],param=config['param']['mm2f']['command'],error_rate=config['error_rate'])

# rule mm2f:
#     input:
#         ref= 'data/ref_{species}.fasta',
#         reads= 'data/samples/{species}_{length}_{error_rate}_reads.fastq'
#     output:
#         "mapped_reads/mm2f_{species}_{length}_{error_rate}_{param}.sam"
#     params:
#         getparam
#     benchmark:
#         "benchmarks/mm2f_{species}_{length}_{error_rate}_{param}.benchmark.txt"
#     shell:
#         "~/bin/mm2-fast/mm2-fast/minimap2 -ax map-ont {input.ref} {input.reads} > {output}"

rule all_blasr:
    input:
        expand("mapped_reads/blasr_{species}_{length}_{error_rate}_{param}.sam",species=config['species'],length=config['length'],param=config['param']['blasr']['command'],error_rate=config['error_rate'])


rule blasr_temp:
    input:
        ref= 'data/ref_{species}.fasta',
        reads= 'data/samples/{species}_{length}_{error_rate}_reads.fastq'
    output:
        sam=temp("mapped_reads/blasr_{species}_{length}_{error_rate}_{param}_temp.sam"),
        unmap=temp("temp_{species}_{length}_{error_rate}_{param}.txt")
    conda:
        "env/blasr.yaml"
    params:
        getparam
    benchmark:
        "benchmarks/blasr_{species}_{length}_{error_rate}_{param}.benchmark.txt"
    shell:
        "blasr {input.reads} {input.ref} {params} --sam -m 1 --unaligned {output.unmap} --noPrintUnalignedSeqs --out {output.sam}> {output.sam}"

rule blasr:
    input:
        sam="mapped_reads/blasr_{species}_{length}_{error_rate}_{param}_temp.sam",
        unmap="temp_{species}_{length}_{error_rate}_{param}.txt"
    output:
        "mapped_reads/blasr_{species}_{length}_{error_rate}_{param}.sam"
    shell:
        """cat {input.sam}>{output};sed 's/>//' {input.unmap} | sed 's/$/\t4\t\*\t0\t0\t\*\t\*\t0\t0\t\*\t\*\trl:i:0/' >>{output}"""


rule all_winnowmap:
    input:
        expand("mapped_reads/winnowmap2_{species}_{length}_{error_rate}_{param}.sam",species=config['species'],length=config['length'],param=config['param']['winnowmap2']['command'],error_rate=config['error_rate'])


# rule winnowmap2:
#     input:
#         ref= 'data/ref_{species}.fasta',
#         reads= 'data/samples/{species}_{length}_{error_rate}_reads.fastq',
#         meril = 'repetitive{species}_{param}.txt', 
#     output:
#         "mapped_reads/winnowmap2_{species}_{length}_{error_rate}_{param}.sam"
#     conda:
#         "env/winnowmap.yaml"
#     params:
        
#     benchmark:
#         "benchmarks/winnowmap2_{species}_{length}_{error_rate}_{param}.benchmark.txt"
#     shell:
#         "winnowmap {params} -W {input.meril} -ax map-ont {input.ref} {input.reads} > {output}"

rule winnowmap2:
    input:
        ref= 'data/ref_{species}.fasta',
        reads= 'data/samples/{species}_{length}_{error_rate}_reads.fastq',
    output:
       "mapped_reads/winnowmap2_{species}_{length}_{error_rate}_{param}.sam"
    params:
        a=getparamk,
        b=getparam
    conda:
        "env/winnowmap.yaml"
    shell:
        """test=$(mktemp -d);
        meryl count k={params.a} output $test {input.ref}
        meryl print greater-than distinct=0.9998 $test > {wildcards.species}_{wildcards.length}_{wildcards.error_rate}_repetitive_k{params.a}.txt
        winnowmap {params.b} -W {wildcards.species}_{wildcards.length}_{wildcards.error_rate}_repetitive_k{params.a}.txt  -ax map-ont {input.ref} {input.reads} > {output};
        rm -r $test;
        rm {wildcards.species}_{wildcards.length}_{wildcards.error_rate}_repetitive_k{params.a}.txt"""

rule all_magicblast:
    input:
        expand("mapped_reads/magicblast_{species}_{length}_{error_rate}_{param}.sam",species=config['species'],length=config['length'],param=config['param']['magicblast']['command'],error_rate=config['error_rate'])


rule magicblast:
    input:
        ref= 'data/ref_{species}.fasta',
        reads= 'data/samples/{species}_{length}_{error_rate}_reads.fastq',
    output:
        "mapped_reads/magicblast_{species}_{length}_{error_rate}_{param}.sam"
    conda:
        "env/magicblast.yaml"
    params:
        getparam
    benchmark:
        "benchmarks/magicblast_{species}_{length}_{error_rate}_{param}.benchmark.txt"
    shell:
        "test=$(mktemp -d) ;makeblastdb -in {input.ref} -out $test  -parse_seqids -dbtype nucl; magicblast -query {input.reads} -db $test -infmt fastq {params} -out {output}; rm -rf $test"

rule all_lra:
    input:
        expand("mapped_reads/lra_{species}_{length}_{error_rate}_{param}.sam",species=config['species'],length=config['length'],param=config['param']['lra']['command'],error_rate=config['error_rate'])

rule lra:
    input:
        ref= 'data/ref_{species}.fasta',
        reads= 'data/samples/{species}_{length}_{error_rate}_reads.fastq',
    output:
        "mapped_reads/lra_{species}_{length}_{error_rate}_{param}.sam"
    conda:
        "env/lra.yaml"
    params:
        getparam
    benchmark:
        "benchmarks/lra_{species}_{length}_{error_rate}_{param}.benchmark.txt"
    shell:
        "lra index -ONT {params} {input.ref};lra align -ONT -a {input.ref} {input.reads}  -p s > {output}"


rule all_minimapsync:
    input:
        expand("mapped_reads/minimapsync_{species}_{length}_{error_rate}_{param}.sam",species=config['species'],length=config['length'],param=config['param']['lra']['command'],error_rate=config['error_rate'])

rule minimapsync:
    input:
        ref= 'data/ref_{species}.fasta',
        reads= 'data/samples/{species}_{length}_{error_rate}_reads.fastq',
    output:
        "mapped_reads/minimapsync_{species}_{length}_{error_rate}_{param}.sam"
    conda:
        "env/minimap2.yaml"
    params:
        getparam
    benchmark:
        "benchmarks/minimapsync_{species}_{length}_{error_rate}_{param}.benchmark.txt"
    shell:
        "minimap2 -h" #-ax map-ont {params} {input.ref} {input.reads} > {output}"

# rule all_minimapos:
#     input:
#         expand("mapped_reads/minimapos_{species}_{length}_{error_rate}_{param}.sam", species=config['species'],length=config['length'],param=config['param']['minimapos']['command'],error_rate=config['error_rate'])

# rule minimapos:
#     input:
#         ref='data/ref_{species}.fasta',
#         reads= 'data/samples/{species}_{length}_{error_rate}_reads.fastq'
#     output:
#         "mapped_reads/minimapos_{species}_{length}_{error_rate}_{param}.sam"
#     conda:
#         "env/minimap2.yaml"
#     params:
#         getparam
#     benchmark:
#         "benchmarks/minimapos_{species}_{length}_{error_rate}_{param}.benchmark.txt"
#     shell:
#         "{path} -ax map-ont {{params}} {{input.ref}} {{input.reads}} > {{output}}".format(path=os.path.join(path_os_minimap,'minimap2'))

rule all_syncminimap:
    input:
        expand("mapped_reads/syncminimap_{species}_{length}_{error_rate}_{param}.sam", species=config['species'],length=config['length'],param=config['param']['syncminimap']['command'],error_rate=config['error_rate'])

rule syncminimap:
    input:
        ref='data/ref_{species}.fasta',
        reads= 'data/samples/{species}_{length}_{error_rate}_reads.fastq'
    output:
        "mapped_reads/syncminimap_{species}_{length}_{error_rate}_{param}.sam"
    conda:
        "env/minimap2.yaml"
    params:
        getparam
    benchmark:
        "benchmarks/syncminimap_{species}_{length}_{error_rate}_{param}.benchmark.txt"
    shell:
        "{path} -ax map-ont {{params}} {{input.ref}} {{input.reads}} > {{output}}".format(path=os.path.join(path_sync_minimap,'minimap2'))

rule all_blend:
    input:
        expand("mapped_reads/blend_{species}_{length}_{error_rate}_{param}.sam", species=config['species'],length=config['length'],param=config['param']['blend']['command'],error_rate=config['error_rate'])

rule blend:
    input:
        ref='data/ref_{species}.fasta',
        reads= 'data/samples/{species}_{length}_{error_rate}_reads.fastq'
    output:
        "mapped_reads/blend_{species}_{length}_{error_rate}_{param}.sam"
    conda:
        "env/blend.yaml"
    params:
        getparam
    benchmark:
        "benchmarks/blend_{species}_{length}_{error_rate}_{param}.benchmark.txt"
    shell:
        "{path} -ax map-ont {{params}} {{input.ref}} {{input.reads}} > {{output}}".format(path=os.path.join(path_blend,'blend'))


# rule all_blast:
#     input:
#         expand("mapped_reads/blast_{species}_{length}_{error_rate}_{param}.sam",species=config['species'],length=config['length'],param=config['param']['magicblast']['command'],error_rate=config['error_rate'])


# rule blast:
#     input:
#         ref= 'data/ref_{species}.fasta',
#         reads= 'data/samples/{species}_{length}_{error_rate}_reads.fastq',
#     output:
#         "mapped_reads/blast_{species}_{length}_{error_rate}_{param}.blastsam"
#     conda:
#         "env/blast.yaml"
#     params:
#         getparam
#     benchmark:
#         "benchmarks/blast_{species}_{length}_{error_rate}_{param}.benchmark.txt"
#     shell:
#         "makeblastdb -in {input.ref} -out blast2db/default -parse_seqids -dbtype nucl; blastn -query {input.reads} -db blast2db/default {params} -out {output};rm blast2db -r;"

rule build_dict:
    input:
        'data/ref_{species}.fasta'
    output:
        'data/ref_{species}.dict'
    conda:
        'env/samtool.yaml'
    shell:
        "samtools faidx {input} ;picard CreateSequenceDictionary -R {input} -O {output}"

rule make_faidx:
    input:
        ref = 'data/ref_{species}.fasta',
    output:
        'data/ref_{species}.fasta.fai'
    conda:
        "env/samtool.yaml"
    shell:
        'samtools faidx {input.ref};'

rule blast_to_sam:
    input:
        ref='data/ref_{species}.dict',
        files="mapped_reads/blast_{species}_{length}_{error_rate}_{param}.blastsam"
    output:
        "mapped_reads/blast_{species}_{length}_{error_rate}_{param}.sam"
    conda:
        'env/samtool.yaml'
    shell:
        """touch {{input.ref}};java -jar {path} {{input.files}} -r {{input.ref}} | iconv -f utf-8 -t utf-8 -c | awk -v ref=$(awk -F '\t' 'NR==2{{{{print substr($2,4)}}}}' {{input.ref}}) -F '\t' 'BEGIN{{{{OFS="\t"}}}} NF>10 {{{{$3=ref}}}} {{{{print}}}}'> {{output}}""".format(path=os.path.join(path_blast2sam,'blast2sam.jar')) 

#-------------------------------build_file----------------------------------


# rule all_ve:
#     input:
#         expand("result/pbsim2/{species}_{length}_{error_rate}_reads.fastq",species=config['species'],length=config['size'],error_rate=config['error_rate'])

# rule nano:
#     input:
#         expand("result/nano/{species}_{length}_0_reads.fastq",species=['vih'],length=config['size'])

# rule all_nano:
#     input:
#         expand("result/nano/{species}__{length}_0_reads.fastq",species=['vih'],length=config['size'],variant=config['variant']['number'])


if not config['realdata']:
    rule mvfiles:
        input:
            a="result/pbsim2/{species}_{length}_{error_rate}_variantreads.fastq",
            b= "data/{species}_variant_file.txt",
            c="result/pbsim2/{species}_{length}_{error_rate}_perfect.sam",
        output:
            a="data/samples/{species}_{length}_{error_rate}_reads.fastq",
            b="data/perfect/{species}_{length}_{error_rate}_perfect.sam"
        shell:
            "mv {input.a} {output.a};mv {input.c} {output.b}"


    # rule all_pb:
    #     input:
    #         expand("result/pbsim2/{species}_{length}_{error_rate}_variantreads.fastq",species=config['species'],length=config['length'],error_rate=config['error_rate'],variant=config['variant']['number'])


    rule build_readsvariant:
        input:
            expand("result/pbsim2/{{species}}_{variant}_{{length}}_{{error_rate}}_reads.fastq",variant=VARIANT),
        output:
            a="result/pbsim2/{species}_{length}_{error_rate}_variantreads1.fastq",
            b="result/pbsim2/{species}_{length}_{error_rate}_perfect.sam"
        conda:
            "envs/pbsim.yaml"
        script:
            'script/buildvariant.py'


    rule add_human:
        input:
            human='data/supl/human_read.fastq',
            data="result/pbsim2/{species}_{length}_{error_rate}_variantreads1.fastq",
        output:
            "result/pbsim2/{species}_{length}_{error_rate}_variantreads.fastq"
        conda:
            "envs/pyt.yaml"
        script:
            'script/select_human_pbsim.py'

    rule build_variant: 
        input:
            ref="data/ref_{species}.fasta"
        output:
            expand('data/ref_{{species}}_{variant}.fasta',variant=VARIANT),
        conda: 
            "envs/pyt.yaml"
        script:
            'script/variant_maker.py'


    rule make_vcf:
        input:
            ref="data/ref_{species}.fasta",
            var='data/ref_{species}_{variant}.fasta',
        output:
            a='data/ref_{species}_{variant}_result.vcf',
            b=temp('data/ref_{species}_{variant}_result_minitemp.paf'),
            c=temp('data/ref_{species}_{variant}_result_minitemp2.paf'),
        params:
            asm=autoasm
        conda:
            "env/minimap2.yaml"
        shell:
           "minimap2 -cx {params.asm} -t8 --cs {input.ref} {input.var} >{output.b}; sort -k6,6 -k8,8n {output.b} >{output.c};\n  paftools.js call -l 1 -L 1 -f {input.ref} {output.c} > {output.a}"

    rule agregate_vcf:
        input:
            expand('data/ref_{{species}}_{variant}_result.vcf.gz',variant=VARIANT),
        output:
            final=temp('data/ref_{species}_agregate_temp1.vcf'),
            tmp=temp('data/ref_{species}_agregate_temp.vcf.gz')
        conda:
            "env/tabix.yaml"
        shell:
            "bcftools merge --force-samples -m none {input} | bgzip > {output.tmp} ;tabix {output.tmp}; truvari collapse -i {output.tmp} -o {output.final}.gz;gunzip {output.final}.gz"

    rule parse_agregate_vcf:
            input:
                'data/ref_{species}_agregate_temp1.vcf',
            output:
                'data/ref_{species}_agregate.vcf.gz',
            conda:
                "env/tabix.yaml"
            shell:
                './scripts/parse_vcf.sh {input} {output};gzip {output}'


    rule index_zip_var:
        input:
            'data/ref_{species}_{variant}_result.vcf'
        output:
            a='data/ref_{species}_{variant}_result.vcf.gz',
            b='data/ref_{species}_{variant}_result.vcf.gz.tbi'#)temp(
        conda:
             "env/tabix.yaml"
        shell:
            "cat {input};bgzip -c {input} > {output.a};tabix -f -p vcf {output.a}"



    rule varfile:
        input:
            expand('data/ref_{{species}}_{variant}.fasta',variant=VARIANT)
        output:
            a="data/{species}_variant_file.txt"
        shell:
            "mv {wildcards.species}_variant_file.txt {output}"
        

            
    #----------rule for pbsim-----------------
    rule simu_phase:
        input:
            ref="data/ref_{species}_{variant}.fasta",
        wildcard_constraints:
            species="[a-z]*"
        conda:
            "envs/pbsim.yaml"
        output:
            temp("result/pbsim2/simu_{species}_{variant}_{length}_{error_rate}")#temp("simu_{species}")
        params:
            number=autocoverage,
            seed= config['seed'],
            tsize='{length}',
            er='{error_rate}',
            tmin= lmin,
            tmax= lmax,
            model='data/supl/'+config['model']+'.model'
        shell:
            "pbsim --depth {params.number} --prefix {output} --length-mean {params.tsize} --length-min {params.tmin} --length-max {params.tmax} --accuracy-mean {params.er} --difference-ratio 23:31:46 --seed {params.seed} --hmm_model {params.model} {input.ref};touch {output}"



    rule convert_phase:
        input:
            "result/pbsim2/simu_{species}_{variant}_{length}_{error_rate}"
        output:
            temp("result/pbsim2/simulated_{species}_{variant}_{length}_{error_rate}")#temp("simu_{species}")
        conda:
            "envs/pyt.yaml"
        script:
            'script/convert_name.py'


    rule pre_perfect:
        input:
            data='result/pbsim2/simulated_{species}_{variant}_{length}_{error_rate}',
            todel='result/pbsim2/simu_{species}_{variant}_{length}_{error_rate}',
            vfile='data/{species}_variant_file.txt',
            faidx='data/ref_{species}.fasta.fai'
        output:
            'result/pbsim2/simu_{species}_{variant}_{length}_{error_rate}_0001_corrected.maf'
        conda:
            'envs/pyt.yaml'
        script:
            'script/correct_sam.py'

    rule build_perfect:
        input:
            data='result/pbsim2/simulated_{species}_{variant}_{length}_{error_rate}',
            cor='result/pbsim2/simu_{species}_{variant}_{length}_{error_rate}_0001_corrected.maf'
        output:
            'perfect_sam/{species}_{variant}_{length}_{error_rate}.sam'
        conda:
            'envs/last.yaml'
        shell:
            'maf-convert --dictionary sam {input.cor} > {output};'




    rule underscore:
        input:
            link="result/{tool}/simulated_{species}_{variant}_{length}_{error_rate}",
        output:
            temp("result/{tool}/{species}_{variant}_{length}_{error_rate}_reads1.fasta")
        shell:
            "sed -i -e 's/ //g' {input.link};sed -i -e 's/;/_/g' {input.link}> {output}"

    rule convert_header:
        input:
            link="result/{tool}/{species}_{variant}_{length}_{error_rate}_reads1.fasta",
            read="result/{tool}/simulated_{species}_{variant}_{length}_{error_rate}",
            samperfert='perfect_sam/{species}_{variant}_{length}_{error_rate}.sam',
        output:
            temp("result/{tool}/{species}_{variant}_{length}_{error_rate}_readsinco.fastq")
        conda:
            'envs/perl.yaml'
        shell:
            'script/convert1.pl {input.read} >{output}'

    rule one_line:
        input: 
            "result/{tool}/{species}_{variant}_{length}_{error_rate}_readsinco.fastq"
        output:
            temp("result/{tool}/{species}_{variant}_{length}_{error_rate}_reads.fastq")
        shell:
            "cat {input}>{output}"
            #"""awk '/^>/ {{printf("\\n%s\\n",$0);next; }} {{ printf("%s",$0);}}  END {{printf("\\n");}}' < {input} | tail -n +2 > {output}"""

rule convert_quick:
    input:
        'data/samples/covid_real_real_reads1.fastq'
    output:
        'data/samples/covid_real_real_reads.fastq'
    conda:
        'envs/perl.yaml'
    shell:
        'script/convert1.pl {input} >{output}'


#----------rule for nanosim-----------------


if not config['realdata']:

    # rule analyse_phase:
    #     input:
    #         ref="data/ref_{species}.fasta",
    #         read="data/read_{species}.fastq"
    #     conda:
    #         "envs/nanosim.yaml"
    #     output:
    #         "result/nano/temp/simu_{species}"
    #     shell:
    #         "read_analysis.py genome -i {input.read} -rg {input.ref} -o {output} -t 24 ;touch {output}"


    # rule simu_phase_nano:
    #     input:
    #         ref="data/ref_{species}.fasta",
    #         folder="result/nano/temp/simu_{species}"
    #     conda: 
    #         "envs/nanosim.yaml"
    #     output:
    #         temp( "result/nano/simulated_{species}_{length}")
    #     params:
    #         number=autocoverage,
    #         seed= config['seed'],
    #         tsize='{length}'
    #     shell:
    #         "simulator.py genome -rg {input.ref} -c {input.folder} -o {output} -n {params.number} -max {params.tsize} -t 24 --seed {params.seed};touch {output}"

    # rule add_human_nano:
    #     input:
    #         human='data/supl/human_read.fastq',
    #         data='result/nano/simulated_{species}_{length}'
    #     output:
    #         temp("result/nano/mv_done_{species}_{length}_human")
    #     conda:
    #         "envs/pyt.yaml"
    #     script:
    #         'script/select_human_nanosim.py'

    # rule rename_nano:
    #     input:
    #         tmp='result/nano/mv_done_{species}_{length}_human',
        
    #     output:
    #         out1=temp("result/nano/done_{species}_{length}_0_human"),
    #         out2=temp("result/nano/simulated_{species}_{length}_0")
    #     shell:
    #         "mv result/nano/simulated_{wildcards.species}_{wildcards.length}_aligned_reads.fastq {output.out2};touch {output.out1}"



    rule perfect_samtobam:
        input:
            ref='data/ref_{species}.fasta',
            psam="data/perfect/{species}_{length}_{error_rate}_perfect.sam",
            fai = 'data/ref_{species}.fasta.fai'
        output:
            pbam="mapped_reads/perfect_{species}_{length}_{error_rate}_perfect.bam",
            tok=temp("mapped_reads/perfect_{species}_{length}_{error_rate}_y.bam"),
            tok1=temp("mapped_reads/perfect_{species}_{length}_{error_rate}_yt.bam"),
            tok2=temp("mapped_reads/perfect_{species}_{length}_{error_rate}_ok.bam"),
        conda:
            "env/samtool.yaml"
        shell:
            """samtools view -bt {input.fai} {input.psam}>{output.tok};
            samtools sort -n {output.tok} -o {output.tok1};
            samtools fixmate {output.tok1} {output.tok2};
            samtools sort {output.tok2} -o {output.pbam}
            samtools index {output.pbam};"""

onsuccess:
    shell('if [[ -d result/nano/temp ]]; then rm result/nano/temp -r ;fi')



onsuccess:
    shell('if ls data/*.fasta.gmidx 2>/dev/null 1>&2;then rm data/*.fasta.gmidx ;fi;if [[ -d blastdb ]]; then rm blastdb -r ;fi')