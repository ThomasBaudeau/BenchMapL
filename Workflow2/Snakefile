configfile: '../config/config2.yaml'



wildcard_constraints:
    msize="\d+"

def autocoverage(wildcards):
    return int(((9000*int(config['number']))/(int(wildcards.msize)/2)))

ruleorder: add_human > convert_header 

rule all:
    input:
        expand("result/pbsim2/pbsim2_{species}_{msize}_{error_rate}_reads.fasta",species=config['species'],msize=config['size'],error_rate=config['error_rate'])

rule nano:
    input:
        expand("result/nano/nano_{species}_{msize}_0_reads.fasta",species=['vih'],msize=config['size'])
    
#----------rule for pbsim-----------------
rule simu_phase:
    input:
        ref="data/ref_{species}.fasta",
        model="data/supl/R103.model"
    conda:
        "envs/pbsim.yaml"
    output:
        temp("result/pbsim2/simu_{species}_{msize}_{error_rate}")#temp("simu_{species}")
    params:
        number=config['number'],
        seed= config['seed'],
        tsize='{msize}',
        er='{error_rate}'
    shell:
        "pbsim --depth {params.number} --prefix {output} --length-mean {params.tsize}  --length-sd 1000  --accuracy-mean {params.er} --difference-ratio 23:31:46 --seed {params.seed} --hmm_model {input.model} {input.ref};touch {output}"


rule convert_phase:
    input:
        "result/pbsim2/simu_{species}_{msize}_{error_rate}"
    output:
        temp("result/pbsim2/simulated_{species}_{msize}_{error_rate}")#temp("simu_{species}")
    conda:
        "envs/pyt.yaml"
    script:
        'script/convert_name.py'


rule add_human:
    input:
        human='data/supl/human_read.fastq',
        data='result/pbsim2/simulated_{species}_{msize}_{error_rate}',
        todel='result/pbsim2/simu_{species}_{msize}_{error_rate}'
    output:
        temp("result/pbsim2/done_{species}_{msize}_{error_rate}_human")
    conda:
        "envs/pyt.yaml"
    script:
        'script/select_human_pbsim.py'

rule underscore:
    input:
        tmp='result/{tool}/done_{species}_{msize}_{error_rate}_human',
        link="result/{tool}/simulated_{species}_{msize}_{error_rate}",
        
    output:
        temp("result/{tool}/{species}_{msize}_{error_rate}_reads1.fasta")
    shell:
        "sed -i -e 's/ //g' {input.link};sed -i -e 's/;/_/g' {input.link};sed -i -e 's/@/>/g' {input.link} > {output}"

rule convert_header:
    input:
        link="result/{tool}/{species}_{msize}_{error_rate}_reads1.fasta",
        read="result/{tool}/simulated_{species}_{msize}_{error_rate}",
    output:
        read="result/{tool}/{species}_{msize}_{error_rate}_reads.fasta"
    conda:
        'envs/perl.yaml'
    shell:
        "script/convert1.pl {input.read} >{output}"
        
#----------rule for nanosim-----------------
rule analyse_phase:
    input:
        ref="data/ref_{species}.fasta",
        read="data/read_{species}.fastq"
    conda:
        "envs/nanosim.yaml"
    output:
        "result/nano/temp/simu_{species}"
    shell:
        "read_analysis.py genome -i {input.read} -rg {input.ref} -o {output} -t 24 ;touch {output}"


rule simu_phase_nano:
    input:
        ref="data/ref_{species}.fasta",
        folder="result/nano/temp/simu_{species}"
    conda: 
        "envs/nanosim.yaml"
    output:
       temp( "result/nano/simulated_{species}_{msize}")
    params:
        number=autocoverage,
        seed= config['seed'],
        tsize='{msize}'
    shell:
        "simulator.py genome -rg {input.ref} -c {input.folder} -o {output} -n {params.number} -max {params.tsize} -t 24 --seed {params.seed};touch {output}"

rule add_human_nano:
    input:
        human='data/supl/human_read.fastq',
        data='result/nano/simulated_{species}_{msize}'
    output:
        temp("result/nano/mv_done_{species}_{msize}_human")
    conda:
        "envs/pyt.yaml"
    script:
        'script/select_human_nanosim.py'

rule rename_nano:
    input:
        tmp='result/nano/mv_done_{species}_{msize}_human',
    
    output:
        out1=temp("result/nano/done_{species}_{msize}_0_human"),
        out2=temp("result/nano/simulated_{species}_{msize}_0")
    shell:
        "mv result/nano/simulated_{wildcards.species}_{wildcards.msize}_aligned_reads.fasta {output.out2};touch {output.out1}"

onsuccess:
    shell('if [[ -d result/nano/temp ]]; then rm result/nano/temp -r ;fi')
