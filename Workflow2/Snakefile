configfile: '../config/config2.yaml'

def autocoverage(wildcards):
    return int(((9000*int(config['number']))/(int(wildcards.msize)/2)))


def variant(wildcards):
    species=config['species']
    var=['WT']
    for j in species:
        for i in range(config['variant']['number']):
            var.append('V'+str(i)+j)
    return var

VARIANT=variant(config)


ruleorder: add_human > convert_header 

# rule all_ve:
#     input:
#         expand("result/pbsim2/{species}_{msize}_{error_rate}_reads.fasta",species=config['species'],msize=config['size'],error_rate=config['error_rate'])

# rule nano:
#     input:
#         expand("result/nano/{species}_{msize}_0_reads.fasta",species=['vih'],msize=config['size'])

# rule all_nano:
#     input:
#         expand("result/nano/{species}__{msize}_0_reads.fasta",species=['vih'],msize=config['size'],variant=config['variant']['number'])


rule all:
    input:
        expand("result/pbsim2/{species}_{msize}_{error_rate}_variantreads.fasta",species=config['species'],msize=config['size'],error_rate=config['error_rate'],variant=config['variant']['number'])


rule build_readsvariant:
    input:
        expand("result/pbsim2/{{species}}_{variant}_{{msize}}_{{error_rate}}_reads.fasta",variant=VARIANT),
        
    output:
        "result/pbsim2/{species}_{msize}_{error_rate}_variantreads.fasta",
    conda:
        "envs/pbsim.yaml"
    script:
        'script/buildvariant.py'

checkpoint build_variant: 
    input:
        ref="data/ref_{species}.fasta"
    output:
        expand('data/ref_{{species}}_{variant}.fasta',variant=VARIANT)
    conda: 
        "envs/pyt.yaml"
    script:
        'script/variant_maker.py'
        
#----------rule for pbsim-----------------
rule simu_phase:
    input:
        ref="data/ref_{species}_{variant}.fasta",
        model="data/supl/R103.model"
    wildcard_constraints:
        species="[a-z]*"
    conda:
        "envs/pbsim.yaml"
    output:
        temp("result/pbsim2/simu_{species}_{variant}_{msize}_{error_rate}")#temp("simu_{species}")
    params:
        number=config['number'],
        seed= config['seed'],
        tsize='{msize}',
        er='{error_rate}'
    shell:
        "pbsim --depth {params.number} --prefix {output} --length-mean {params.tsize}  --length-sd 1000  --accuracy-mean {params.er} --difference-ratio 23:31:46 --seed {params.seed} --hmm_model {input.model} {input.ref};touch {output}"



rule convert_phase:
    input:
        "result/pbsim2/simu_{species}_{variant}_{msize}_{error_rate}"
    output:
        temp("result/pbsim2/simulated_{species}_{variant}_{msize}_{error_rate}")#temp("simu_{species}")
    conda:
        "envs/pyt.yaml"
    script:
        'script/convert_name.py'


rule pre_perfect:
    input:
        data='result/pbsim2/simulated_{species}_{variant}_{msize}_{error_rate}',
        todel='result/pbsim2/simu_{species}_{variant}_{msize}_{error_rate}'
    output:
        'result/pbsim2/simu_{species}_{variant}_{msize}_{error_rate}_0001_corrected.maf'
    conda:
        'envs/pyt.yaml'
    script:
        'script/correct_sam.py'

rule build_perfect:
    input:
        data='result/pbsim2/simulated_{species}_{variant}_{msize}_{error_rate}',
        cor='result/pbsim2/simu_{species}_{variant}_{msize}_{error_rate}_0001_corrected.maf'
    output:
        'perfect_sam/{species}_{variant}_{msize}_{error_rate}.sam'
    conda:
        'envs/last.yaml'
    shell:
        'maf-convert --dictionary -n sam {input.cor} > {output};'


rule add_human:
    input:
        human='data/supl/human_read.fastq',
        data='result/pbsim2/simulated_{species}_{variant}_{msize}_{error_rate}',
        todel='result/pbsim2/simu_{species}_{variant}_{msize}_{error_rate}',
        samperfert='perfect_sam/{species}_{variant}_{msize}_{error_rate}.sam'
    output:
        temp("result/pbsim2/done_{species}_{variant}_{msize}_{error_rate}_human")
    conda:
        "envs/pyt.yaml"
    script:
        'script/select_human_pbsim.py'

rule underscore:
    input:
        tmp='result/{tool}/done_{species}_{variant}_{msize}_{error_rate}_human',
        link="result/{tool}/simulated_{species}_{variant}_{msize}_{error_rate}",
    output:
        temp("result/{tool}/{species}_{variant}_{msize}_{error_rate}_reads1.fasta")
    shell:
        "sed -i -e 's/ //g' {input.link};sed -i -e 's/;/_/g' {input.link};sed -i -e 's/@/>/g' {input.link} > {output}"

rule convert_header:
    input:
        link="result/{tool}/{species}_{variant}_{msize}_{error_rate}_reads1.fasta",
        read="result/{tool}/simulated_{species}_{variant}_{msize}_{error_rate}",
    output:
        temp("result/{tool}/{species}_{variant}_{msize}_{error_rate}_readsinco.fasta")
    conda:
        'envs/perl.yaml'
    shell:
        'script/convert1.pl {input.read} >{output}'
        
rule one_line:
    input: 
        "result/{tool}/{species}_{variant}_{msize}_{error_rate}_readsinco.fasta"
    output:
        "result/{tool}/{species}_{variant}_{msize}_{error_rate}_reads.fasta"
    shell:
        """awk '/^>/ {{printf("\\n%s\\n",$0);next; }} {{ printf("%s",$0);}}  END {{printf("\\n");}}' < {input} | tail -n +2 > {output}"""
#----------rule for nanosim-----------------
rule analyse_phase:
    input:
        ref="data/ref_{species}.fasta",
        read="data/read_{species}.fastq"
    conda:
        "envs/nanosim.yaml"
    output:
        "result/nano/temp/simu_{species}"
    shell:
        "read_analysis.py genome -i {input.read} -rg {input.ref} -o {output} -t 24 ;touch {output}"


rule simu_phase_nano:
    input:
        ref="data/ref_{species}.fasta",
        folder="result/nano/temp/simu_{species}"
    conda: 
        "envs/nanosim.yaml"
    output:
       temp( "result/nano/simulated_{species}_{msize}")
    params:
        number=autocoverage,
        seed= config['seed'],
        tsize='{msize}'
    shell:
        "simulator.py genome -rg {input.ref} -c {input.folder} -o {output} -n {params.number} -max {params.tsize} -t 24 --seed {params.seed};touch {output}"

rule add_human_nano:
    input:
        human='data/supl/human_read.fastq',
        data='result/nano/simulated_{species}_{msize}'
    output:
        temp("result/nano/mv_done_{species}_{msize}_human")
    conda:
        "envs/pyt.yaml"
    script:
        'script/select_human_nanosim.py'

rule rename_nano:
    input:
        tmp='result/nano/mv_done_{species}_{msize}_human',
    
    output:
        out1=temp("result/nano/done_{species}_{msize}_0_human"),
        out2=temp("result/nano/simulated_{species}_{msize}_0")
    shell:
        "mv result/nano/simulated_{wildcards.species}_{wildcards.msize}_aligned_reads.fasta {output.out2};touch {output.out1}"

onsuccess:
    shell('if [[ -d result/nano/temp ]]; then rm result/nano/temp -r ;fi')
