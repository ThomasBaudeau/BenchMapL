configfile: '../config/config2.yaml'

wildcard_constraints:
    msize="\d+"

rule all:
    input:
        expand("{species}_{msize}_reads.fasta",species=['vih'],msize=config['size'])

rule analyse_phase:
    input:
        ref="data/ref_{species}.fasta",
        read="data/read_{species}.fastq"
    conda:
        "envs/nanosim.yaml"
    output:
        "simu_{species}"#temp("simu_{species}")
    shell:
        "read_analysis.py genome -i {input.read} -rg {input.ref} -o {output} -t 24 > {output};touch {output}"

rule simu_phase:
    input:
        ref="data/ref_{species}.fasta",
        folder="simu_{species}"
    conda: 
        "envs/nanosim.yaml"
    output:
       temp( "simulated_{species}_{msize}")
    params:
        number='100',
        seed= config['seed'],
        tsize='{msize}'
    shell:
        "simulator.py genome -rg {input.ref} -c {input.folder} -o {output} -n {params.number} -max {params.tsize} -t 24 --seed {params.seed};touch {output}"


rule add_human:
    input:
        human='data/supl/human_read.fastq',
        data='simulated_{species}_{msize}'
    output:
        temp("done_{species}_{msize}_human")
    conda:
        "envs/pyt.yaml"
    script:
        'script/select_human.py'

rule underscore:
    input:
        tmp='done_{species}_{msize}_human',
        link="simulated_{species}_{msize}"
    output:
        temp("{species}_{msize}_reads1.fasta")
    shell:
        "sed -i -e 's/;/_/g' simulated_{wildcards.species}_{wildcards.msize}_aligned_reads.fasta > {output};"

rule convert_header:
    input:
        link="{species}_{msize}_reads1.fasta",
    output:
        read="{species}_{msize}_reads.fasta"
    conda:
        'envs/perl.yaml'
    shell:
        "script/convert1.pl simulated_{wildcards.species}_{wildcards.msize}_aligned_reads.fasta >{output}"